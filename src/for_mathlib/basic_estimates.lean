/-
Copyright (c) 2021 Thomas Bloom, Alex Kontorovich, Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Thomas Bloom, Alex Kontorovich, Bhavik Mehta
-/

import analysis.special_functions.integrals
import analysis.special_functions.pow
import number_theory.arithmetic_function
import number_theory.von_mangoldt
import number_theory.primorial
import measure_theory.function.floor
import measure_theory.integral.integral_eq_improper
import data.complex.exponential_bounds
import analysis.p_series
import topology.algebra.order.floor
import number_theory.prime_counting
import analysis.special_functions.log.base
import for_mathlib.misc
import for_mathlib.integral_rpow
import tactic.equiv_rw

noncomputable theory

open_locale big_operators nnreal filter topological_space arithmetic_function

open filter asymptotics real set

section to_mathlib

end to_mathlib

lemma tendsto_log_coe_at_top : tendsto (Œª x : ‚Ñï, log (x : ‚Ñù)) at_top at_top :=
tendsto_log_at_top.comp tendsto_coe_nat_at_top_at_top
lemma tendsto_log_log_coe_at_top : tendsto (Œª x : ‚Ñï, log (log (x : ‚Ñù))) at_top at_top :=
tendsto_log_at_top.comp tendsto_log_coe_at_top
lemma tendsto_log_log_log_coe_at_top : tendsto (Œª x : ‚Ñï, log (log (log (x : ‚Ñù)))) at_top at_top :=
tendsto_log_at_top.comp tendsto_log_log_coe_at_top

variables {M : Type*} [add_comm_monoid M] (a : ‚Ñï ‚Üí M)

/--
Given a function `a : ‚Ñï ‚Üí M` from the naturals into an additive commutative monoid, this expresses
‚àë 1 ‚â§ n ‚â§ x, a(n).
-/
def summatory (a : ‚Ñï ‚Üí M) (k : ‚Ñï) (x : ‚Ñù) : M :=
‚àë n in finset.Icc k ‚åäx‚åã‚Çä, a n

lemma summatory_nat (k n : ‚Ñï) :
  summatory a k n = ‚àë i in finset.Icc k n, a i :=
by simp only [summatory, nat.floor_coe]

lemma summatory_eq_floor {k : ‚Ñï} (x : ‚Ñù) :
  summatory a k x = summatory a k ‚åäx‚åã‚Çä :=
by rw [summatory, summatory, nat.floor_coe]

lemma summatory_eq_of_Ico {n k : ‚Ñï} {x : ‚Ñù}
  (hx : x ‚àà Ico (n : ‚Ñù) (n + 1)) :
  summatory a k x = summatory a k n :=
by rw [summatory_eq_floor, nat.floor_eq_on_Ico' _ _ hx]

lemma summatory_eq_of_lt_one {k : ‚Ñï} {x : ‚Ñù} (hk : k ‚â† 0) (hx : x < k) :
  summatory a k x = 0 :=
begin
  rw [summatory, finset.Icc_eq_empty_of_lt, finset.sum_empty],
  rwa [nat.floor_lt' hk],
end

lemma summatory_zero_eq_of_lt {x : ‚Ñù} (hx : x < 1) :
  summatory a 0 x = a 0 :=
by rw [summatory_eq_floor, nat.floor_eq_zero.2 hx, summatory_nat, finset.Icc_self,
  finset.sum_singleton]

@[simp] lemma summatory_zero {k : ‚Ñï} (hk : k ‚â† 0) : summatory a k 0 = 0 :=
summatory_eq_of_lt_one _ hk (by rwa [nat.cast_pos, pos_iff_ne_zero])

@[simp] lemma summatory_self {k : ‚Ñï} : summatory a k k = a k :=
by simp [summatory]

@[simp] lemma summatory_one : summatory a 1 1 = a 1 :=
by simp [summatory]

lemma summatory_succ (k n : ‚Ñï) (hk : k ‚â§ n + 1) :
  summatory a k (n+1) = a (n + 1) + summatory a k n :=
by rw [summatory_nat, ‚Üênat.cast_add_one, summatory_nat, ‚Üênat.Ico_succ_right, @add_comm M,
  finset.sum_Ico_succ_top hk, nat.Ico_succ_right]

lemma summatory_succ_sub {M : Type*} [add_comm_group M] (a : ‚Ñï ‚Üí M) (k : ‚Ñï) (n : ‚Ñï)
  (hk : k ‚â§ n + 1) :
  a (n + 1) = summatory a k (n + 1) - summatory a k n :=
begin
  rwa [‚Üênat.cast_add_one, summatory_nat, summatory_nat, ‚Üênat.Ico_succ_right,
    finset.sum_Ico_succ_top, nat.Ico_succ_right, add_sub_cancel'],
end

lemma summatory_eq_sub {M : Type*} [add_comm_group M] (a : ‚Ñï ‚Üí M) :
  ‚àÄ n, n ‚â† 0 ‚Üí a n = summatory a 1 n - summatory a 1 (n - 1)
| 0 h := (h rfl).elim
| (n+1) _ := by simpa using summatory_succ_sub a 1 n

lemma abs_summatory_le_sum {M : Type*} [semi_normed_group M] (a : ‚Ñï ‚Üí M) {k : ‚Ñï} {x : ‚Ñù} :
  ‚à•summatory a k x‚à• ‚â§ ‚àë i in finset.Icc k ‚åäx‚åã‚Çä, ‚à•a i‚à• :=
norm_sum_le _ _

lemma summatory_const_one {x : ‚Ñù} :
  summatory (Œª _, (1 : ‚Ñù)) 1 x = (‚åäx‚åã‚Çä : ‚Ñù) :=
by { rw [summatory, finset.sum_const, nat.card_Icc, nat.smul_one_eq_coe], refl }

lemma summatory_nonneg' {M : Type*} [ordered_add_comm_group M] {a : ‚Ñï ‚Üí M} (k : ‚Ñï) (x : ‚Ñù)
  (ha : ‚àÄ (i : ‚Ñï), k ‚â§ i ‚Üí (i : ‚Ñù) ‚â§ x ‚Üí 0 ‚â§ a i) (hk : k ‚â† 0) :
  0 ‚â§ summatory a k x :=
begin
  apply finset.sum_nonneg,
  simp only [and_imp, finset.mem_Icc],
  intros i hi‚ÇÅ hi‚ÇÇ,
  apply ha i hi‚ÇÅ ((nat.le_floor_iff' (ne_of_gt (lt_of_lt_of_le hk.bot_lt hi‚ÇÅ))).1 hi‚ÇÇ),
end

lemma summatory_nonneg {M : Type*} [ordered_add_comm_group M] (a : ‚Ñï ‚Üí M) (x : ‚Ñù) (k : ‚Ñï)
  (ha : ‚àÄ (i : ‚Ñï), 0 ‚â§ a i) :
  0 ‚â§ summatory a k x :=
finset.sum_nonneg (Œª i _, ha _)

lemma summatory_monotone_of_nonneg {M : Type*} [ordered_add_comm_group M] (a : ‚Ñï ‚Üí M) (k : ‚Ñï)
  (ha : ‚àÄ (i : ‚Ñï), 0 ‚â§ a i) :
  monotone (summatory a k) :=
begin
  intros i j h,
  refine finset.sum_le_sum_of_subset_of_nonneg _ (Œª k _ _, ha _),
  apply finset.Icc_subset_Icc le_rfl (nat.floor_mono h),
end

lemma abs_summatory_bound {M : Type*} [semi_normed_group M] (a : ‚Ñï ‚Üí M) (k z : ‚Ñï)
  {x : ‚Ñù} (hx : x ‚â§ z) :
  ‚à•summatory a k x‚à• ‚â§ ‚àë i in finset.Icc k z, ‚à•a i‚à• :=
(abs_summatory_le_sum a).trans
  (finset.sum_le_sum_of_subset_of_nonneg
    (finset.Icc_subset_Icc le_rfl (nat.floor_le_of_le hx)) (by simp))

open measure_theory

@[measurability] lemma measurable_summatory {M : Type*} [add_comm_monoid M] [measurable_space M]
  {k : ‚Ñï} {a : ‚Ñï ‚Üí M} :
  measurable (summatory a k) :=
begin
  change measurable ((Œª y, ‚àë i in finset.Icc k y, a i) ‚àò _),
  exact measurable_from_nat.comp nat.measurable_floor,
end

lemma partial_summation_integrable {ùïú : Type*} [is_R_or_C ùïú] (a : ‚Ñï ‚Üí ùïú) {f : ‚Ñù ‚Üí ùïú} {x y : ‚Ñù}
  {k : ‚Ñï} (hf' : integrable_on f (Icc x y)) :
  integrable_on (summatory a k * f) (Icc x y) :=
begin
  let b := ‚àë i in finset.Icc k ‚åày‚åâ‚Çä, ‚à•a i‚à•,
  have : integrable_on (b ‚Ä¢ f) (Icc x y) := integrable.smul b hf',
  refine this.integrable.mono (measurable_summatory.ae_strongly_measurable.mul hf'.1) _,
  rw ae_restrict_iff' (measurable_set_Icc : measurable_set (Icc x _)),
  refine eventually_of_forall (Œª z hz, _),
  rw [pi.mul_apply, norm_mul, pi.smul_apply, norm_smul],
  refine mul_le_mul_of_nonneg_right ((abs_summatory_bound _ _ ‚åày‚åâ‚Çä _).trans _) (norm_nonneg _),
  { exact hz.2.trans (nat.le_ceil y) },
  rw real.norm_eq_abs,
  exact le_abs_self b,
end

/-- A version of partial summation where the upper bound is a natural number, useful to prove the
general case. -/
theorem partial_summation_nat {ùïú : Type*} [is_R_or_C ùïú] (a : ‚Ñï ‚Üí ùïú) (f f' : ‚Ñù ‚Üí ùïú)
  {k : ‚Ñï} {N : ‚Ñï} (hN : k ‚â§ N)
  (hf : ‚àÄ i ‚àà Icc (k : ‚Ñù) N, has_deriv_at f (f' i) i) (hf' : integrable_on f' (Icc k N)) :
  ‚àë n in finset.Icc k N, a n * f n =
    summatory a k N * f N - ‚à´ t in Icc (k : ‚Ñù) N, summatory a k t * f' t :=
begin
  rw ‚Üênat.Ico_succ_right,
  revert hf hf',
  refine nat.le_induction _ _ _ hN,
  { simp },
  intros N hN' ih hf hf',
  have hN'' : (N:‚Ñù) ‚â§ N + 1 := by simp only [zero_le_one, le_add_iff_nonneg_right],
  have : Icc (k:‚Ñù) (N+1) = Icc k N ‚à™ Icc N (N+1),
  { refine (Icc_union_Icc_eq_Icc _ hN'').symm,
    rwa nat.cast_le },
  simp only [nat.cast_succ, this, mem_union_eq, or_imp_distrib, forall_and_distrib,
    integrable_on_union] at ih hf hf' ‚ä¢,
  replace ih := ih hf.1 hf'.1,
  have hN''' := hN'.trans le_self_add,
  rw [finset.sum_Ico_succ_top hN''', ih, summatory_succ _ _ _ hN''', add_mul, add_sub_assoc,
    add_comm, nat.cast_add_one, add_right_inj, eq_comm, sub_eq_sub_iff_sub_eq_sub, ‚Üêmul_sub,
    integral_union_ae, add_sub_cancel',
    ‚Üêset_integral_congr_set_ae (Ico_ae_eq_Icc' volume_singleton)],
  rotate, -- the first goal is the only hard one
  { rw [ae_disjoint, Icc_inter_Icc_eq_singleton _ hN'', volume_singleton],
    rwa nat.cast_le },
  { exact measurable_set_Icc.null_measurable_set },
  { exact partial_summation_integrable a hf'.1 },
  { exact partial_summation_integrable a hf'.2 },
  have : eq_on (Œª x, summatory a k x * f' x) (Œª x, summatory a k N ‚Ä¢ f' x) (Ico N (N+1)) :=
      Œª x hx, congr_arg2 (*) (summatory_eq_of_Ico _ hx) rfl,
  rw [set_integral_congr measurable_set_Ico this, integral_smul, algebra.id.smul_eq_mul,
      set_integral_congr_set_ae (Ico_ae_eq_Ioc' volume_singleton volume_singleton),
      ‚Üêinterval_integral.integral_of_le hN'', interval_integral.integral_eq_sub_of_has_deriv_at],
  { rw interval_of_le hN'',
    exact hf.2 },
  { exact (interval_integrable_iff_integrable_Icc_of_le hN'').2 hf'.2 },
end

/--
Right now this works for functions taking values in R or C, I think it should work for more target
spaces.
Also valid if k = 0 and a 0 = 0, not sure which is more interesting
-/
theorem partial_summation {ùïú : Type*} [is_R_or_C ùïú] (a : ‚Ñï ‚Üí ùïú) (f f' : ‚Ñù ‚Üí ùïú) {k : ‚Ñï} {x : ‚Ñù}
  (hk : k ‚â† 0) (hf : ‚àÄ i ‚àà Icc (k:‚Ñù) x, has_deriv_at f (f' i) i)
  (hf' : integrable_on f' (Icc k x)) :
  summatory (Œª n, a n * f n) k x =
    summatory a k x * f x - ‚à´ t in Icc (k : ‚Ñù) x, summatory a k t * f' t :=
begin
  cases lt_or_le x k,
  { rw [Icc_eq_empty_of_lt h, measure.restrict_empty, integral_zero_measure, sub_zero,
      summatory_eq_of_lt_one _ hk h, summatory_eq_of_lt_one _ hk h, zero_mul] },
  have hx : k ‚â§ ‚åäx‚åã‚Çä := by rwa [nat.le_floor_iff' hk],
  have hx' : (‚åäx‚åã‚Çä : ‚Ñù) ‚â§ x := nat.floor_le (le_trans (nat.cast_nonneg _) h),
  have hx'' : (k : ‚Ñù) ‚â§ ‚åäx‚åã‚Çä := by rwa nat.cast_le,
  have : Icc (k : ‚Ñù) x = Icc k ‚åäx‚åã‚Çä ‚à™ Icc ‚åäx‚åã‚Çä x := (Icc_union_Icc_eq_Icc hx'' hx').symm,
  simp only [this, integrable_on_union, mem_union, or_imp_distrib, forall_and_distrib] at hf hf' ‚ä¢,
  rw [summatory, partial_summation_nat a f f' hx hf.1 hf'.1, eq_comm,
    sub_eq_sub_iff_sub_eq_sub, summatory_eq_floor, ‚Üêmul_sub,
    integral_union_ae _ (measurable_set_Icc.null_measurable_set : null_measurable_set (Icc (_:‚Ñù) _)),
    add_sub_cancel'],
  { have : eq_on (Œª y, summatory a k y * f' y) (Œª y, summatory a k ‚åäx‚åã‚Çä ‚Ä¢ f' y) (Icc ‚åäx‚åã‚Çä x),
    { intros y hy,
      dsimp,
      rw summatory_eq_floor,
      congr' 3,
      exact nat.floor_eq_on_Ico _ _ ‚ü®hy.1, hy.2.trans_lt (nat.lt_floor_add_one _)‚ü© },
    rw [set_integral_congr measurable_set_Icc this, integral_smul, algebra.id.smul_eq_mul,
      ‚Üêset_integral_congr_set_ae (Ioc_ae_eq_Icc' volume_singleton),
      ‚Üêinterval_integral.integral_of_le hx',
      interval_integral.integral_eq_sub_of_has_deriv_at],
    { rw interval_of_le hx',
      exact hf.2 },
    { exact (interval_integrable_iff_integrable_Icc_of_le hx').2 hf'.2 } },
  { apply partial_summation_integrable _ hf'.1 },
  { apply partial_summation_integrable _ hf'.2 },
  { rw [ae_disjoint, Icc_inter_Icc_eq_singleton hx'' hx',
      volume_singleton] },
end

theorem partial_summation_cont {ùïú : Type*} [is_R_or_C ùïú] (a : ‚Ñï ‚Üí ùïú) (f f' : ‚Ñù ‚Üí ùïú) {k : ‚Ñï} {x : ‚Ñù}
  (hk : k ‚â† 0) (hf : ‚àÄ i ‚àà Icc (k:‚Ñù) x, has_deriv_at f (f' i) i) (hf' : continuous_on f' (Icc k x)) :
  summatory (Œª n, a n * f n) k x =
    summatory a k x * f x - ‚à´ t in Icc (k : ‚Ñù) x, summatory a k t * f' t :=
partial_summation _ _ _ hk hf hf'.integrable_on_Icc

/--
A variant of partial summation where we assume differentiability of `f` and integrability of `f'` on
`[1, ‚àû)` and derive the partial summation equation for all `x`.
-/
theorem partial_summation' {ùïú : Type*} [is_R_or_C ùïú] (a : ‚Ñï ‚Üí ùïú) (f f' : ‚Ñù ‚Üí ùïú) {k : ‚Ñï} (hk : k ‚â† 0)
  (hf : ‚àÄ i ‚àà Ici (k:‚Ñù), has_deriv_at f (f' i) i) (hf' : integrable_on f' (Ici k)) {x : ‚Ñù} :
  summatory (Œª n, a n * f n) k x =
    summatory a k x * f x - ‚à´ t in Icc (k : ‚Ñù) x, summatory a k t * f' t :=
partial_summation _ _ _ hk (Œª i hi, hf _ hi.1) (hf'.mono_set Icc_subset_Ici_self)

/--
A variant of partial summation where we assume differentiability of `f` and continuity of `f'` on
`[1, ‚àû)` and derive the partial summation equation for all `x`.
-/
theorem partial_summation_cont' {ùïú : Type*} [is_R_or_C ùïú] (a : ‚Ñï ‚Üí ùïú) (f f' : ‚Ñù ‚Üí ùïú) {k : ‚Ñï}
  (hk : k ‚â† 0) (hf : ‚àÄ i ‚àà Ici (k:‚Ñù), has_deriv_at f (f' i) i) (hf' : continuous_on f' (Ici k))
  (x : ‚Ñù) :
  summatory (Œª n, a n * f n) k x =
    summatory a k x * f x - ‚à´ t in Icc (k : ‚Ñù) x, summatory a k t * f' t :=
partial_summation_cont _ _ _ hk (Œª i hi, hf _ hi.1) (hf'.mono Icc_subset_Ici_self)

-- BM: A definition of the Euler-Mascheroni constant
-- Maybe a different form is a better definition, and in any case it would be nice to show the
-- different definitions are equivalent.
-- This version uses an integral over an infinite interval, which in mathlib is *not* defined
-- as the limit of integrals over finite intervals, but there is a result saying they are equal:
-- see measure_theory.integral.integral_eq_improper: `interval_integral_tendsto_integral_Ioi`
def euler_mascheroni : ‚Ñù := 1 - ‚à´ t in Ioi 1, int.fract t * (t^2)‚Åª¬π

lemma fract_mul_integrable {f : ‚Ñù ‚Üí ‚Ñù} (s : set ‚Ñù)
  (hf' : integrable_on f s) :
  integrable_on (int.fract * f) s :=
begin
  refine integrable.mono hf' _ (eventually_of_forall _),
  { exact measurable_fract.ae_strongly_measurable.mul hf'.1 },
  intro x,
  simp only [norm_mul, pi.mul_apply, norm_of_nonneg (int.fract_nonneg _)],
  exact mul_le_of_le_one_left (norm_nonneg _) (int.fract_lt_one _).le,
end

lemma euler_mascheroni_convergence_rate :
  is_O_with 1 at_top
    (Œª x : ‚Ñù, 1 - (‚à´ t in Ioc 1 x, int.fract t * (t^2)‚Åª¬π) - euler_mascheroni) (Œª x, x‚Åª¬π) :=
begin
  apply is_O_with.of_bound,
  rw eventually_at_top,
  refine ‚ü®1, Œª x (hx : _ ‚â§ _), _‚ü©,
  have h : integrable_on (Œª (x : ‚Ñù), int.fract x * (x ^ 2)‚Åª¬π) (Ioi 1),
  { apply fract_mul_integrable,
    apply integrable_on_pow_inv_Ioi one_lt_two zero_lt_one },
  rw [one_mul, euler_mascheroni, norm_of_nonneg (inv_nonneg.2 (zero_le_one.trans hx)),
    sub_sub_sub_cancel_left, ‚Üêintegral_diff measurable_set_Ioc h (h.mono_set Ioc_subset_Ioi_self)
    Ioc_subset_Ioi_self, Ioi_diff_Icc hx, norm_of_nonneg],
  { apply (set_integral_mono_on (h.mono_set (Ioi_subset_Ioi hx))
      (integrable_on_pow_inv_Ioi one_lt_two (zero_lt_one.trans_le hx)) measurable_set_Ioi _).trans,
    { rw integral_pow_inv_Ioi one_lt_two (zero_lt_one.trans_le hx),
      norm_num },
    { intros t ht,
      exact mul_le_of_le_one_left (inv_nonneg.2 (sq_nonneg _)) (int.fract_lt_one _).le } },
  exact set_integral_nonneg measurable_set_Ioi
    (Œª t ht, div_nonneg (int.fract_nonneg _) (sq_nonneg _)),
end

lemma euler_mascheroni_integral_Ioc_convergence :
  tendsto (Œª x : ‚Ñù, 1 - ‚à´ t in Ioc 1 x, int.fract t * (t^2)‚Åª¬π) at_top (ùìù euler_mascheroni) :=
by simpa using
  (euler_mascheroni_convergence_rate.is_O.trans_tendsto tendsto_inv_at_top_zero).add_const
    euler_mascheroni

lemma euler_mascheroni_interval_integral_convergence :
  tendsto (Œª x : ‚Ñù, (1 : ‚Ñù) - ‚à´ t in 1..x, int.fract t * (t^2)‚Åª¬π) at_top (ùìù euler_mascheroni) :=
begin
  apply euler_mascheroni_integral_Ioc_convergence.congr' _,
  rw [eventually_eq, eventually_at_top],
  exact ‚ü®1, Œª x hx, by rw interval_integral.integral_of_le hx‚ü©,
end

lemma harmonic_series_is_O_aux {x : ‚Ñù} (hx : 1 ‚â§ x) :
  summatory (Œª i, (i : ‚Ñù)‚Åª¬π) 1 x - log x - euler_mascheroni =
    (1 - (‚à´ t in Ioc 1 x, int.fract t * (t^2)‚Åª¬π) - euler_mascheroni) - int.fract x * x‚Åª¬π :=
begin
  have diff : (‚àÄ (i ‚àà Ici (1:‚Ñù)), has_deriv_at (Œª x, x‚Åª¬π) (-(i ^ 2)‚Åª¬π) i),
  { rintro i (hi : (1:‚Ñù) ‚â§ _),
    apply has_deriv_at_inv (zero_lt_one.trans_le hi).ne' },
  have cont : continuous_on (Œª (i : ‚Ñù), (i ^ 2)‚Åª¬π) (Ici 1),
  { refine ((continuous_pow 2).continuous_on.inv‚ÇÄ _),
    rintro i (hi : _ ‚â§ _),
    exact (pow_ne_zero_iff nat.succ_pos').2 (zero_lt_one.trans_le hi).ne' },
  have ps := partial_summation_cont' (Œª _, (1 : ‚Ñù)) _ _ one_ne_zero
    (by exact_mod_cast diff) (by exact_mod_cast cont.neg) x,
  simp only [one_mul] at ps,
  simp only [ps, integral_Icc_eq_integral_Ioc],
  rw [summatory_const_one, nat.cast_floor_eq_cast_int_floor (zero_le_one.trans hx),
    ‚Üêint.self_sub_floor, sub_mul, mul_inv_cancel (zero_lt_one.trans_le hx).ne', sub_sub (1 : ‚Ñù),
    sub_sub_sub_cancel_left, sub_sub, sub_sub, sub_right_inj, ‚Üêadd_assoc, add_left_inj,
    ‚Üêeq_sub_iff_add_eq', nat.cast_one, ‚Üêintegral_sub],
  rotate,
  { apply fract_mul_integrable,
    exact (cont.mono Icc_subset_Ici_self).integrable_on_Icc.mono_set Ioc_subset_Icc_self },
  { refine integrable_on.congr_set_ae _ Ioc_ae_eq_Icc,
    exact partial_summation_integrable _ (cont.neg.mono Icc_subset_Ici_self).integrable_on_Icc },
  have : eq_on (Œª a : ‚Ñù, int.fract a * (a ^ 2)‚Åª¬π - summatory (Œª _, (1 : ‚Ñù)) 1 a * -(a ^ 2)‚Åª¬π)
    (Œª y : ‚Ñù, y‚Åª¬π) (Ioc 1 x),
  { intros y hy,
    dsimp,
    have : 0 < y := zero_lt_one.trans hy.1,
    rw [summatory_const_one, nat.cast_floor_eq_cast_int_floor this.le, mul_neg, sub_neg_eq_add,
      ‚Üêadd_mul, int.fract_add_floor, sq, mul_inv, mul_inv_cancel_left‚ÇÄ this.ne'] },
  rw [set_integral_congr measurable_set_Ioc this, ‚Üêinterval_integral.integral_of_le hx,
    integral_inv_of_pos zero_lt_one (zero_lt_one.trans_le hx), div_one],
end

lemma is_O_with_one_fract_mul (f : ‚Ñù ‚Üí ‚Ñù) :
  is_O_with 1 at_top (Œª (x : ‚Ñù), int.fract x * f x) f :=
begin
  apply is_O_with.of_bound (eventually_of_forall _),
  intro x,
  simp only [one_mul, norm_mul],
  refine mul_le_of_le_one_left (norm_nonneg _) _,
  rw norm_of_nonneg (int.fract_nonneg _),
  exact (int.fract_lt_one x).le,
end

lemma harmonic_series_is_O_with :
  is_O_with 2 at_top (Œª x, summatory (Œª i, (i : ‚Ñù)‚Åª¬π) 1 x - log x - euler_mascheroni) (Œª x, x‚Åª¬π) :=
begin
  have : is_O_with 1 at_top (Œª (x : ‚Ñù), int.fract x * x‚Åª¬π) (Œª x, x‚Åª¬π) := is_O_with_one_fract_mul _,
  refine (euler_mascheroni_convergence_rate.sub this).congr' _ _ eventually_eq.rfl,
  { norm_num1 }, -- I seriously need to prove 1 + 1 = 2
  filter_upwards [eventually_ge_at_top (1 : ‚Ñù)],
  intros x hx,
  exact (harmonic_series_is_O_aux hx).symm,
end

lemma harmonic_series_real_limit :
  tendsto (Œª x, (‚àë i in finset.Icc 1 ‚åäx‚åã‚Çä, (i : ‚Ñù)‚Åª¬π) - log x) at_top (ùìù euler_mascheroni) :=
by simpa using
  (harmonic_series_is_O_with.is_O.trans_tendsto tendsto_inv_at_top_zero).add_const euler_mascheroni

lemma harmonic_series_limit :
  tendsto (Œª (n : ‚Ñï), (‚àë i in finset.Icc 1 n, (i : ‚Ñù)‚Åª¬π) - log n) at_top (ùìù euler_mascheroni) :=
(harmonic_series_real_limit.comp tendsto_coe_nat_at_top_at_top).congr (Œª x, by simp)

lemma summatory_log_aux {x : ‚Ñù} (hx : 1 ‚â§ x) :
  summatory (Œª i, log i) 1 x - (x * log x - x) =
    1 + ((‚à´ t in 1..x, int.fract t * t‚Åª¬π) - int.fract x * log x) :=
begin
  rw interval_integral.integral_of_le hx,
  have diff : (‚àÄ (i ‚àà Ici (1:‚Ñù)), has_deriv_at log (i‚Åª¬π) i),
  { rintro i (hi : (1:‚Ñù) ‚â§ _),
    exact has_deriv_at_log (zero_lt_one.trans_le hi).ne' },
  have cont : continuous_on (Œª x : ‚Ñù, x‚Åª¬π) (Ici 1),
  { exact continuous_on_inv‚ÇÄ.mono  (Œª x (hx : _ ‚â§ _), (zero_lt_one.trans_le hx).ne') },
  have ps := partial_summation_cont' (Œª _, (1 : ‚Ñù)) _ _ one_ne_zero
    (by exact_mod_cast diff) (by exact_mod_cast cont) x,
  simp only [one_mul] at ps,
  simp only [ps, integral_Icc_eq_integral_Ioc],
  clear ps,
  rw [summatory_const_one, nat.cast_floor_eq_cast_int_floor (zero_le_one.trans hx), ‚Üêint.self_sub_fract,
    sub_mul, sub_sub (x * log x), sub_sub_sub_cancel_left, sub_eq_iff_eq_add, add_assoc,
    ‚Üêsub_eq_iff_eq_add', ‚Üêadd_assoc, sub_add_cancel, nat.cast_one, ‚Üêintegral_add],
  { rw [‚Üêintegral_one, interval_integral.integral_of_le hx, set_integral_congr],
    { apply measurable_set_Ioc },
    intros y hy,
    have hy' : 0 < y := zero_lt_one.trans hy.1,
    rw [‚Üêadd_mul, summatory_const_one, nat.cast_floor_eq_cast_int_floor hy'.le, int.fract_add_floor,
      mul_inv_cancel hy'.ne'] },
  { apply fract_mul_integrable,
    exact (cont.mono Icc_subset_Ici_self).integrable_on_Icc.mono_set Ioc_subset_Icc_self },
  { apply (partial_summation_integrable _ _).mono_set Ioc_subset_Icc_self,
    exact (cont.mono Icc_subset_Ici_self).integrable_on_Icc },
end

lemma is_o_const_of_tendsto_at_top (f : ‚Ñù ‚Üí ‚Ñù) (l : filter ‚Ñù) (h : tendsto f l at_top) (c : ‚Ñù) :
  is_o l (Œª (x : ‚Ñù), c) f :=
begin
  rw is_o_iff,
  intros Œµ hŒµ,
  have : ‚àÄ·∂† (x : ‚Ñù) in at_top, ‚à•c‚à• ‚â§ Œµ * ‚à•x‚à•,
  { filter_upwards [eventually_ge_at_top (‚à•c‚à• * Œµ‚Åª¬π), eventually_ge_at_top (0:‚Ñù)],
    intros x hx‚ÇÅ hx‚ÇÇ,
    rwa [‚Üêmul_inv_le_iff hŒµ, norm_of_nonneg hx‚ÇÇ] },
  exact h.eventually this,
end

lemma is_o_one_log (c : ‚Ñù) : is_o at_top (Œª (x : ‚Ñù), c) log :=
is_o_const_of_tendsto_at_top _ _ tendsto_log_at_top _

lemma summatory_log {c : ‚Ñù} (hc : 2 < c) :
  is_O_with c at_top (Œª x, summatory (Œª i, log i) 1 x - (x * log x - x)) (Œª x, log x) :=
begin
  have f‚ÇÅ : is_O_with 1 at_top (Œª (x : ‚Ñù), int.fract x * log x) (Œª x, log x) :=
    is_O_with_one_fract_mul _,
  have f‚ÇÇ : is_o at_top (Œª (x : ‚Ñù), (1 : ‚Ñù)) log  := is_o_one_log _,
  have f‚ÇÉ : is_O_with 1 at_top (Œª (x : ‚Ñù), ‚à´ t in 1..x, int.fract t * t‚Åª¬π) log,
  { simp only [is_O_with_iff, eventually_at_top, ge_iff_le, one_mul],
    refine ‚ü®1, Œª x hx, _‚ü©,
    rw [norm_of_nonneg (log_nonneg hx), norm_of_nonneg, ‚Üêdiv_one x,
      ‚Üêintegral_inv_of_pos zero_lt_one (zero_lt_one.trans_le hx), div_one],
    swap,
    { apply interval_integral.integral_nonneg hx,
      intros y hy,
      exact mul_nonneg (int.fract_nonneg _) (inv_nonneg.2 (zero_le_one.trans hy.1)) },
    { have h‚ÇÅ : interval_integrable (Œª (u : ‚Ñù), u‚Åª¬π) volume 1 x,
      { refine interval_integral.interval_integrable_inv _ continuous_on_id,
        intros y hy,
        rw interval_of_le hx at hy,
        exact (zero_lt_one.trans_le hy.1).ne' },
      have h‚ÇÇ : ‚àÄ y ‚àà Icc 1 x, int.fract y * y‚Åª¬π ‚â§ y‚Åª¬π,
      { intros y hy,
        refine mul_le_of_le_one_left (inv_nonneg.2 _) (int.fract_lt_one _).le,
        exact zero_le_one.trans hy.1 },
      apply interval_integral.integral_mono_on hx _ h‚ÇÅ h‚ÇÇ,
      { refine h‚ÇÅ.mono_fun' _ _,
        { exact measurable.ae_strongly_measurable (by measurability) },
        rw [eventually_le, ae_restrict_iff'],
        { apply eventually_of_forall,
          intros y hy,
          rw interval_oc_of_le hx at hy,
          rw [norm_mul, norm_inv, norm_of_nonneg (int.fract_nonneg _),
            norm_of_nonneg (zero_le_one.trans hy.1.le)],
          apply h‚ÇÇ,
          exact Ioc_subset_Icc_self hy },
        exact measurable_set_interval_oc } } },
  apply (f‚ÇÇ.add_is_O_with (f‚ÇÉ.sub f‚ÇÅ) _).congr' rfl _ eventually_eq.rfl,
  { norm_num [hc] },
  rw [eventually_eq, eventually_at_top],
  exact ‚ü®1, Œª x hx, (summatory_log_aux hx).symm‚ü©,
end

lemma summatory_mul_floor_eq_summatory_sum_divisors {x y : ‚Ñù}
  (hy : 0 ‚â§ x) (xy : x ‚â§ y) (f : ‚Ñï ‚Üí ‚Ñù) :
  summatory (Œª n, f n * ‚åäx / n‚åã) 1 y = summatory (Œª n, ‚àë i in n.divisors, f i) 1 x :=
begin
  simp_rw [summatory, ‚Üênat.cast_floor_eq_cast_int_floor (div_nonneg hy (nat.cast_nonneg _)),
    ‚Üêsummatory_const_one, summatory, finset.mul_sum, mul_one, finset.sum_sigma'],
  refine finset.sum_bij _ _ _ _ _,
  -- Construct the forward function
  { intros i hi,
    exact ‚ü®i.1 * i.2, i.1‚ü© },
  -- Show it lands in the correct set
  { rintro ‚ü®i, j‚ü© hi,
    simp_rw [finset.mem_sigma, finset.mem_Icc, nat.mem_divisors, dvd_mul_right, true_and, ne.def,
      nat.mul_eq_zero, not_or_distrib, ‚Üêne.def, nat.le_floor_iff hy, nat.cast_mul,
      ‚Üêpos_iff_ne_zero, nat.succ_le_iff],
    simp only [finset.mem_Icc, finset.mem_sigma, nat.succ_le_iff,
      nat.le_floor_iff (div_nonneg hy (nat.cast_nonneg _))] at hi,
    refine ‚ü®‚ü®mul_pos hi.1.1 hi.2.1, _‚ü©, hi.1.1, hi.2.1‚ü©,
    apply (le_div_iff' _).1 hi.2.2,
    exact nat.cast_pos.2 hi.1.1 },
  -- Show it respects the function
  { rintro ‚ü®i, j‚ü©,
    simp },
  -- Show it's injective
  { rintro ‚ü®i‚ÇÅ, j‚ÇÅ‚ü© ‚ü®i‚ÇÇ, j‚ÇÇ‚ü© h‚ÇÅ h‚ÇÇ h,
    dsimp at h,
    simp only [finset.mem_Icc, finset.mem_sigma, nat.succ_le_iff] at h‚ÇÅ h‚ÇÇ,
    simp only [heq_iff_eq] at h ‚ä¢,
    cases h.2,
    rw mul_right_inj' h‚ÇÅ.1.1.ne' at h,
    exact ‚ü®h.2, h.1‚ü© },
  -- Show it's surjective
  { rintro ‚ü®i, j‚ü© h,
    refine ‚ü®‚ü®j, i / j‚ü©, _‚ü©,
    simp_rw [finset.mem_sigma, finset.mem_Icc, nat.mem_divisors, nat.le_floor_iff hy,
      nat.succ_le_iff] at h,
    obtain ‚ü®‚ü®hij, hx'‚ü©, ‚ü®i, rfl‚ü©, -‚ü© := h,
    simp_rw [exists_prop],
    simp only [canonically_ordered_comm_semiring.mul_pos] at hij,
    simp only [finset.mem_Icc, and_true, true_and, eq_self_iff_true, finset.mem_sigma, heq_iff_eq,
      nat.succ_le_iff, hij.1, hij.2, nat.mul_div_right, le_div_iff, nat.le_floor_iff (hy.trans xy),
      nat.le_floor_iff (div_nonneg hy (nat.cast_nonneg _)), nat.cast_pos, ‚Üênat.cast_mul],
    rw [mul_comm] at hx',
    refine ‚ü®le_trans _ (hx'.trans xy), hx'‚ü©,
    rw nat.cast_le,
    apply nat.le_mul_of_pos_left hij.2 }
end

namespace nat.arithmetic_function

lemma sigma_zero_eq_zeta_mul_zeta :
  œÉ 0 = Œ∂ * Œ∂ :=
by rw [‚Üêzeta_mul_pow_eq_sigma, pow_zero_eq_zeta]

lemma sigma_zero_apply_eq_sum_divisors {i : ‚Ñï} :
  œÉ 0 i = ‚àë d in i.divisors, 1 :=
begin
  rw [sigma_apply, finset.sum_congr rfl],
  intros x hx,
  apply pow_zero,
end

lemma sigma_zero_apply_eq_card_divisors {i : ‚Ñï} :
  œÉ 0 i = i.divisors.card :=
 by rw [sigma_zero_apply_eq_sum_divisors, finset.card_eq_sum_ones]

end nat.arithmetic_function

localized "notation `œÑ` := nat.arithmetic_function.sigma 0" in arithmetic_function
open nat.arithmetic_function

lemma exp_sub_mul {x c : ‚Ñù} {hc : 0 ‚â§ c} : c - c * log c ‚â§ exp x - c * x :=
begin
  rcases eq_or_lt_of_le hc with rfl | hc,
  { simp [(exp_pos _).le] },
  suffices : exp (log c) - c * log c ‚â§ exp x - c * x,
  { rwa exp_log hc at this },
  have h‚ÇÅ : differentiable ‚Ñù (Œª x, exp x - c * x) :=
    differentiable_exp.sub (differentiable_id.const_mul _),
  have h‚ÇÇ : ‚àÄ t, deriv (Œª y, exp y - c * y) t = exp t - c := by simp,
  cases le_total (log c) x with hx hx,
  { refine (convex_Icc (log c) x).monotone_on_of_deriv_nonneg h‚ÇÅ.continuous.continuous_on
      h‚ÇÅ.differentiable_on _ (left_mem_Icc.2 hx) (right_mem_Icc.2 hx) hx,
    intros y hy,
    rw interior_Icc at hy,
    rw [h‚ÇÇ, sub_nonneg, ‚Üêlog_le_iff_le_exp hc],
    apply hy.1.le },
  { refine (convex_Icc x (log c)).antitone_on_of_deriv_nonpos h‚ÇÅ.continuous.continuous_on
      h‚ÇÅ.differentiable_on _ (left_mem_Icc.2 hx) (right_mem_Icc.2 hx) hx,
    intros y hy,
    rw interior_Icc at hy,
    rw [h‚ÇÇ, sub_nonpos, ‚Üêle_log_iff_exp_le hc],
    apply hy.2.le },
end

lemma div_bound_aux1 (n : ‚Ñù) (r : ‚Ñï) (K : ‚Ñù) (h1 : 2 ^ K ‚â§ n) (h2 : 0 < K) :
  (r : ‚Ñù) + 1 ‚â§ n ^ ((r : ‚Ñù) / K) :=
begin
  transitivity (2 : ‚Ñù) ^ (r : ‚Ñù),
  { rw add_comm, simpa using one_add_mul_le_pow (show (-2 : ‚Ñù) ‚â§ 1, by norm_num) r },
  { refine le_trans _ (rpow_le_rpow _ h1 _),
    { rw [‚Üêrpow_mul (zero_le_two : (0 : ‚Ñù) ‚â§ 2), mul_div_cancel' _ h2.ne'] },
    { refine rpow_nonneg_of_nonneg zero_le_two _ },
    { exact div_nonneg (nat.cast_nonneg _) h2.le } }
end

lemma bernoulli_aux (x : ‚Ñù) : x + 1 / 2 ‚â§ 2 ^ x :=
begin
  have h : (0 : ‚Ñù) < log (2 : ‚Ñù) := log_pos one_lt_two,
  have h‚ÇÅ :
    1 / real.log 2 - 1 / real.log 2 * log (1 / real.log 2) ‚â§
      exp (real.log 2 * x) - 1 / real.log 2 * (real.log 2 * x),
  { apply exp_sub_mul,
    simp only [one_div, inv_nonneg],
    apply h.le },
  rw [rpow_def_of_pos zero_lt_two, ‚Üêle_sub_iff_add_le'],
  rw [‚Üêmul_assoc, div_mul_cancel _ h.ne', one_mul] at h‚ÇÅ,
  apply le_trans _ h‚ÇÅ,
  rw [one_div (real.log 2), log_inv],
  simp only [one_div, mul_neg, sub_neg_eq_add],
  suffices : real.log 2 / 2 - 1 ‚â§ log (real.log 2),
  { field_simp [h],
    rw le_div_iff h,
    linarith },
  transitivity' (-1/2),
  { linarith [log_two_lt_d9] },
  rw [div_le_iff' (@zero_lt_two ‚Ñù _ _), ‚Üêlog_rpow h, le_log_iff_exp_le (rpow_pos_of_pos h _)],
  apply exp_neg_one_lt_d9.le.trans _,
  apply le_trans _ (rpow_le_rpow _ log_two_gt_d9.le zero_le_two),
  { rw [real.rpow_two],
    norm_num },
  { norm_num }
end

lemma div_bound_aux2 (n : ‚Ñù) (r : ‚Ñï) (K : ‚Ñù) (h1 : 2 ‚â§ n) (h2 : 2 ‚â§ K) :
  (r : ‚Ñù) + 1 ‚â§ n ^ ((r : ‚Ñù) / K) * K :=
begin
  have h4 : ((r : ‚Ñù) + 1) / K ‚â§ 2 ^ ((r : ‚Ñù) / K),
  { transitivity (r : ‚Ñù) / K + 1 / 2,
    { rw add_div,
      simp only [one_div, add_le_add_iff_left],
      exact inv_le_inv_of_le zero_lt_two h2 },
    exact bernoulli_aux _ },
  have : 0 < K := by linarith,
  transitivity (2 : ‚Ñù) ^ ((r : ‚Ñù) / K) * K,
  { rwa ‚Üê div_le_iff this },
  apply mul_le_mul_of_nonneg_right _ this.le,
  exact rpow_le_rpow zero_le_two h1 (div_nonneg (nat.cast_nonneg _) this.le),
end

lemma divisor_function_exact_prime_power (r : ‚Ñï) {p : ‚Ñï} (h : p.prime) : œÉ 0 (p ^ r) = r + 1 :=
begin
  rw [nat.arithmetic_function.sigma_zero_apply_eq_card_divisors, nat.divisors_prime_pow h,
    finset.card_map, finset.card_range],
end

variables {R : Type*}

lemma divisor_function_exact {n : ‚Ñï} :
  n ‚â† 0 ‚Üí œÉ 0 n = n.factorization.prod (Œª _ k, k + 1) :=
begin
  intro hn,
  rw [nat.arithmetic_function.is_multiplicative_sigma.multiplicative_factorization _ hn],
  apply finsupp.prod_congr,
  intros p hp,
  rw divisor_function_exact_prime_power _ (nat.prime_of_mem_factorization hp),
end

lemma divisor_function_div_pow_eq {n : ‚Ñï} (K : ‚Ñù) (hn : n ‚â† 0) :
  (œÉ 0 n : ‚Ñù) / n ^ K‚Åª¬π = n.factorization.prod (Œª p k, (k + 1) / (p ^ (‚Üëk / K))) :=
begin
  simp only [finsupp.prod, finset.prod_div_distrib, rpow_nat_cast, ‚Üênat.cast_pow, ‚Üêfinset.prod_rpow,
    div_eq_mul_inv (coe _) K, rpow_mul, nat.cast_nonneg, implies_true_iff, ‚Üênat.cast_prod],
  rw [‚Üêfinsupp.prod, nat.factorization_prod_pow_eq_self hn, divisor_function_exact hn, finsupp.prod,
    nat.cast_prod],
  simp only [nat.cast_add_one],
end

@[to_additive sum_le_sum_of_subset_of_nonpos]
lemma prod_le_prod_of_subset_of_le_one' {Œπ N : Type*} [ordered_comm_monoid N]
  {s t : finset Œπ} {f : Œπ ‚Üí N} (h : s ‚äÜ t) (hf : ‚àÄ i ‚àà t, i ‚àâ s ‚Üí f i ‚â§ 1) :
  ‚àè i in t, f i ‚â§ ‚àè i in s, f i :=
by classical;
calc ‚àè i in t, f i = ‚àè i in t \ s ‚à™ s, f i : by rw [finset.sdiff_union_of_subset h]
    ... = (‚àè i in t \ s, f i) * ‚àè i in s, f i : finset.prod_union finset.sdiff_disjoint
    ... ‚â§ ‚àè i in s, f i : mul_le_of_le_one_left' $ finset.prod_le_one' $ by simpa

lemma prod_le_prod_of_subset_of_le_one {Œπ N : Type*} [ordered_comm_semiring N]
  {s t : finset Œπ} {f : Œπ ‚Üí N} (h : s ‚äÜ t) (hs : ‚àÄ i ‚àà t, 0 ‚â§ f i) (hf : ‚àÄ i ‚àà t, i ‚àâ s ‚Üí f i ‚â§ 1) :
  ‚àè i in t, f i ‚â§ ‚àè i in s, f i :=
by classical;
calc ‚àè i in t, f i = (‚àè i in t \ s, f i) * ‚àè i in s, f i : (finset.prod_sdiff h).symm
    ... ‚â§ ‚àè i in s, f i :
      mul_le_of_le_one_left (finset.prod_nonneg (Œª i hi, hs _ (h hi))) $
        finset.prod_le_one (Œª i hi, hs _ (finset.sdiff_subset _ _ hi)) (by simpa)

lemma prod_of_subset_le_prod_of_one_le {Œπ N : Type*} [ordered_comm_semiring N]
  {s t : finset Œπ} {f : Œπ ‚Üí N} (h : t ‚äÜ s) (hs : ‚àÄ i ‚àà t, 0 ‚â§ f i) (hf : ‚àÄ i ‚àà s, i ‚àâ t ‚Üí 1 ‚â§ f i) :
  ‚àè i in t, f i ‚â§ ‚àè i in s, f i :=
by classical;
calc ‚àè i in t, f i ‚â§ (‚àè i in s \ t, f i) * ‚àè i in t, f i :
      le_mul_of_one_le_left (finset.prod_nonneg hs) (one_le_prod (by simpa using hf))
    ... = ‚àè i in s, f i : finset.prod_sdiff h

lemma anyk_divisor_bound (n : ‚Ñï) {K : ‚Ñù} (hK : 2 ‚â§ K) :
  (œÉ 0 n : ‚Ñù) ‚â§ (n : ‚Ñù) ^ (1 / K) * K ^ ((2 : ‚Ñù) ^ K) :=
begin
  rcases n.eq_zero_or_pos with rfl | hn,
  { simp only [one_div, finset.card_empty, algebra.id.smul_eq_mul, nat.divisors_zero,
      nat.cast_zero, zero_mul, finset.sum_const, pow_zero, nat.arithmetic_function.sigma_apply],
    rw zero_rpow, { simp },
    simp only [inv_eq_zero, ne.def],
    linarith },
  rw [‚Üêdiv_le_iff' (rpow_pos_of_pos (nat.cast_pos.2 hn) _), one_div,
    divisor_function_div_pow_eq _ hn.ne', finsupp.prod, nat.support_factorization],
  have : n.factors.to_finset.filter (Œª p, ‚Üëp < (2 : ‚Ñù) ^ K) ‚äÜ _ := finset.filter_subset _ _,
  refine (prod_le_prod_of_subset_of_le_one this _ _).trans _,
  { intros i hi,
    exact div_nonneg (nat.cast_add_one_pos _).le (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _) },
  { simp only [list.mem_to_finset, finset.mem_filter, true_and, not_lt] {contextual := tt},
    intros p hp hp',
    refine div_le_one_of_le _ (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _),
    apply div_bound_aux1 _ _ _ hp',
    linarith },
  refine (finset.prod_le_prod _ _).trans ((finset.prod_const K).trans_le _),
  { intros i _,
    exact div_nonneg (nat.cast_add_one_pos _).le (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _) },
  swap,
  { rw ‚Üêrpow_nat_cast,
    refine rpow_le_rpow_of_exponent_le (by linarith) _,
    simp only [‚Üênat.le_floor_iff (rpow_nonneg_of_nonneg zero_le_two _)],
    rw [‚Üênat.sub_zero ‚åä(_ : ‚Ñù)‚åã‚Çä, ‚Üênat.card_Ioc 0 ‚åä(2 : ‚Ñù) ^ K‚åã‚Çä],
    refine finset.card_le_of_subset _,
    intros p,
    simp only [finset.mem_filter, list.mem_to_finset, finset.mem_Ioc, and_imp],
    intros hp‚ÇÅ hp‚ÇÇ,
    refine ‚ü®nat.pos_of_mem_factors hp‚ÇÅ, _‚ü©,
    rw [nat.le_floor_iff (rpow_nonneg_of_nonneg zero_le_two _)],
    exact hp‚ÇÇ.le },
  intros p hp,
  simp only [finset.mem_filter, list.mem_to_finset] at hp,
  have hp' := nat.prime_of_mem_factors hp.1,
  rw div_le_iff',
  apply div_bound_aux2 _ _ _ _ hK,
  { exact_mod_cast hp'.two_le },
  exact rpow_pos_of_pos (nat.cast_pos.2 hp'.pos) _,
end.

lemma log_le_log_of_le {x y : ‚Ñù} (hx : 0 < x) (hxy : x ‚â§ y) : log x ‚â§ log y :=
(log_le_log hx (hx.trans_le hxy)).2 hxy

lemma log_log_mul_log_div_rpow {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  tendsto (Œª x : ‚Ñù, log (log x) * log x / x ^ Œµ) at_top (ùìù 0) :=
begin
  refine is_o.tendsto_div_nhds_zero _,
  refine ((is_o_log_id_at_top.comp_tendsto tendsto_log_at_top).mul_is_O (is_O_refl _ _)).trans _,
  refine ((is_o_log_rpow_at_top (half_pos hŒµ)).pow zero_lt_two).congr' _ _,
  { filter_upwards with x using by simp [sq] },
  filter_upwards [eventually_ge_at_top (0 : ‚Ñù)] with x hx,
  rw [‚Üêrpow_two, ‚Üêrpow_mul hx, div_mul_cancel Œµ two_ne_zero],
end

lemma divisor_bound‚ÇÅ {Œµ : ‚Ñù} (hŒµ1 : 0 < Œµ) (hŒµ2 : Œµ ‚â§ 1) :
  ‚àÄ·∂† (n : ‚Ñï) in at_top, (œÉ 0 n : ‚Ñù) ‚â§ n ^ (real.log 2 / log (log (n : ‚Ñù)) * (1 + Œµ)) :=
begin
  have h : tendsto (coe : ‚Ñï ‚Üí ‚Ñù) at_top at_top := tendsto_coe_nat_at_top_at_top,
  have hl := tendsto_log_at_top.comp h,
  have hx : tendsto
    (Œª n : ‚Ñï, 2 * (log (log (log (n : ‚Ñù))) * log (log (n : ‚Ñù)) / log (n : ‚Ñù) ^ (Œµ / 3)))
    at_top (ùìù 0),
  { simpa using ((log_log_mul_log_div_rpow (div_pos hŒµ1 zero_lt_three)).comp hl).const_mul 2 },
  have hŒµ : 0 < real.log 2 * Œµ / 2 := half_pos (mul_pos (log_pos one_lt_two) hŒµ1),
  filter_upwards [tendsto_log_log_coe_at_top (eventually_ge_at_top (real.log 2 * (1 + Œµ / 2))‚Åª¬π),
    tendsto_log_log_coe_at_top (eventually_gt_at_top 0), hl (eventually_gt_at_top 0),
    tendsto_log_log_coe_at_top (eventually_ge_at_top (2 * real.log 2 * (1 + Œµ / 2))),
    h (eventually_gt_at_top 0),
    hx (metric.closed_ball_mem_nhds 0 hŒµ)] with n hlln' hlln hln hlln'' hn hx',
  dsimp at hlln hlln' hln hlln'' hn,
  simp only [mem_preimage, mem_closed_ball_zero_iff, norm_eq_abs] at hx',
  set K := log (log (n : ‚Ñù)) / ((real.log 2) * (1 + Œµ / 2)) with hK,
  have hpowK_pos : 0 < (2 : ‚Ñù) ^ K := rpow_pos_of_pos zero_lt_two _,
  have hŒµ : 0 < real.log 2 * (1 + Œµ / 2),
  { exact mul_pos (log_pos one_lt_two) (by linarith) },
  have hpowK : 2 ^ K ‚â§ real.log n ^ (1 - Œµ / 3),
  { rw [‚Üêlog_le_log hpowK_pos (rpow_pos_of_pos hln _), log_rpow zero_lt_two, log_rpow hln, hK,
      mul_comm (real.log 2), ‚Üêdiv_div, div_mul_cancel _ (log_pos one_lt_two).ne',
      div_le_iff', ‚Üêmul_assoc],
    { exact le_mul_of_one_le_left hlln.le (by nlinarith) },
    { linarith } },
  have hlogK : log K ‚â§ 2 * log (log (real.log n)),
  { rwa [hK, div_eq_mul_inv, log_mul hlln.ne' (ne_of_gt _), two_mul, add_le_add_iff_left,
      log_le_log _ hlln];
    exact inv_pos.2 hŒµ },
  have hK‚ÇÇ : 2 ‚â§ K,
  { rwa [le_div_iff hŒµ, ‚Üêmul_assoc] },
  have hK‚ÇÄ : 0 < K := zero_lt_two.trans_le hK‚ÇÇ,
  have hK' : 0 < K ^ ((2 : ‚Ñù) ^ K) := rpow_pos_of_pos hK‚ÇÄ _,
  refine (anyk_divisor_bound n hK‚ÇÇ).trans _,
  rw [‚Üêlog_le_log (mul_pos (rpow_pos_of_pos hn _) hK') (rpow_pos_of_pos hn _),
    log_mul (rpow_pos_of_pos hn _).ne' hK'.ne', log_rpow hn, log_rpow hK‚ÇÄ, log_rpow hn],
  refine (add_le_add_left (mul_le_mul hpowK hlogK (log_nonneg (one_le_two.trans hK‚ÇÇ))
    (rpow_nonneg_of_nonneg hln.le _)) _).trans _,
  rw [hK, one_div_div, ‚Üêdiv_mul_eq_mul_div],
  suffices : log (n : ‚Ñù) ^ (1 - Œµ / 3) * (2 * log (log (log (n : ‚Ñù)))) ‚â§
    log (2 : ‚Ñù) / log (log (n : ‚Ñù)) * (Œµ / 2) * log (n : ‚Ñù),
  { linarith },
  suffices : 2 * (log (log (log (n : ‚Ñù))) * log (log (n : ‚Ñù)) / (log (n : ‚Ñù) ^ (Œµ / 3))) ‚â§
    log (2 : ‚Ñù) * Œµ / 2,
  { rw [rpow_sub hln, div_eq_mul_one_div, rpow_one, div_mul_eq_mul_div,
      mul_comm _ (log (n : ‚Ñù)), mul_assoc],
    refine mul_le_mul_of_nonneg_left _ hln.le,
    rw le_div_iff hlln,
    field_simp at this ‚ä¢,
    rwa [mul_assoc] },
  exact le_of_abs_le hx',
end

lemma divisor_bound {Œµ : ‚Ñù} (hŒµ1 : 0 < Œµ) :
  ‚àÄ·∂† (n : ‚Ñï) in at_top, (œÉ 0 n : ‚Ñù) ‚â§ n ^ (real.log 2 / log (log (n : ‚Ñù)) * (1 + Œµ)) :=
begin
  cases le_total Œµ 1,
  { apply divisor_bound‚ÇÅ hŒµ1 h },
  have t := tendsto_log_at_top,
  have t' := (t.comp t).comp tendsto_coe_nat_at_top_at_top,
  filter_upwards [divisor_bound‚ÇÅ zero_lt_one le_rfl, t' (eventually_ge_at_top 0),
    eventually_ge_at_top 1] with n hn hn' hn'',
  dsimp at hn',
  apply hn.trans (rpow_le_rpow_of_exponent_le _ _),
  { rwa nat.one_le_cast },
  exact mul_le_mul_of_nonneg_left (by linarith) (div_nonneg (log_nonneg one_le_two) hn'),
end

lemma trivial_divisor_bound {n : ‚Ñï} :
  œÉ 0 n ‚â§ n :=
begin
  rw [sigma_zero_apply_eq_card_divisors],
  exact (finset.card_le_of_subset (finset.filter_subset _ _)).trans_eq (by simp),
end

lemma weak_divisor_bound (Œµ : ‚Ñù) (hŒµ : 0 < Œµ) :
  ‚àÄ·∂† (n : ‚Ñï) in at_top, (œÉ 0 n : ‚Ñù) ‚â§ (n : ‚Ñù)^Œµ :=
begin
  cases le_total (1 : ‚Ñù) Œµ,
  { filter_upwards [eventually_ge_at_top 1] with n hn,
    refine (nat.cast_le.2 _).trans (real.le_rpow_self_of_one_le (nat.one_le_cast.2 hn) h),
    exact trivial_divisor_bound },
  let t := tendsto_log_at_top,
  have hx : tendsto (Œª n : ‚Ñï, log (2 : ‚Ñù) * 2 * (log (log (n : ‚Ñù)))‚Åª¬π) at_top (ùìù 0),
  { simpa using ((t.comp t).comp tendsto_coe_nat_at_top_at_top).inv_tendsto_at_top.const_mul
      (log (2 : ‚Ñù) * 2) },
  filter_upwards [divisor_bound zero_lt_one, eventually_ge_at_top 1,
    hx (metric.closed_ball_mem_nhds 0 hŒµ)] with n hn hn' hx',
  refine hn.trans (rpow_le_rpow_of_exponent_le (nat.one_le_cast.2 hn') _),
  rw [div_mul_eq_mul_div, div_eq_mul_inv],
  simp only [mem_preimage, mem_closed_ball_zero_iff, norm_eq_abs] at hx',
  exact le_of_abs_le hx'
end

lemma von_mangoldt_upper {n : ‚Ñï} : Œõ n ‚â§ log (n : ‚Ñù) :=
begin
  rcases n.eq_zero_or_pos with rfl | hn,
  { simp },
  rw ‚Üêvon_mangoldt_sum, exact finset.single_le_sum (Œª i hi, von_mangoldt_nonneg)
    (nat.mem_divisors_self _ hn.ne'),
end

lemma von_mangoldt_summatory {x y : ‚Ñù} (hx : 0 ‚â§ x) (xy : x ‚â§ y) :
  summatory (Œª n, Œõ n * ‚åäx / n‚åã) 1 y = summatory (Œª n, real.log n) 1 x :=
by simp only [summatory_mul_floor_eq_summatory_sum_divisors hx xy,
  von_mangoldt_sum]

lemma helpful_floor_identity {x : ‚Ñù} :
  ‚åäx‚åã - 2 * ‚åäx/2‚åã ‚â§ 1 :=
begin
  rw [‚Üêint.lt_add_one_iff, ‚Üê@int.cast_lt ‚Ñù],
  push_cast,
  linarith [int.sub_one_lt_floor (x/2), int.floor_le x],
end

lemma helpful_floor_identity2 {x : ‚Ñù} (hx‚ÇÅ : 1 ‚â§ x) (hx‚ÇÇ : x < 2) :
  ‚åäx‚åã - 2 * ‚åäx/2‚åã = 1 :=
begin
  have h‚ÇÅ : ‚åäx‚åã = 1,
  { rw [int.floor_eq_iff, int.cast_one],
    exact ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü© },
  have h‚ÇÇ : ‚åäx/2‚åã = 0,
  { rw [int.floor_eq_iff],
    norm_cast,
    split;
    linarith },
  rw [h‚ÇÅ, h‚ÇÇ],
  simp,
end

lemma helpful_floor_identity3 {x : ‚Ñù} :
  2 * ‚åäx/2‚åã ‚â§ ‚åäx‚åã :=
begin
  have h‚ÇÑ : (2 : ‚Ñù) * ‚åäx / 2‚åã - 1 < ‚åäx‚åã :=
    lt_of_le_of_lt (sub_le_sub_right ((le_div_iff' (by norm_num1)).1 (int.floor_le _)) _)
      (int.sub_one_lt_floor x),
  norm_cast at h‚ÇÑ,
  rwa ‚Üêint.sub_one_lt_iff,
end

def chebyshev_error (x : ‚Ñù) : ‚Ñù :=
  (summatory (Œª i, real.log i) 1 x - (x * log x - x))
    - 2 * (summatory (Œª i, real.log i) 1 (x/2) - (x/2 * log (x/2) - x/2))

lemma von_mangoldt_floor_sum {x : ‚Ñù} (hx‚ÇÄ : 0 < x) :
  summatory (Œª n, Œõ n * (‚åäx / n‚åã - 2 * ‚åäx / n / 2‚åã)) 1 x = real.log 2 * x + chebyshev_error x :=
begin
  rw [chebyshev_error, mul_sub, log_div hx‚ÇÄ.ne' two_ne_zero, mul_sub, ‚Üêmul_assoc,
    mul_div_cancel' x two_ne_zero, mul_sub, sub_right_comm (x * log x), ‚Üêsub_add _ (_ - _),
    sub_add_eq_add_sub, sub_sub_sub_cancel_right, ‚Üêsub_sub, mul_comm x, add_sub_cancel'_right,
    ‚Üêvon_mangoldt_summatory hx‚ÇÄ.le le_rfl, summatory,
    ‚Üêvon_mangoldt_summatory (div_nonneg hx‚ÇÄ.le zero_le_two) (half_le_self hx‚ÇÄ.le), summatory,
    summatory, finset.mul_sum, ‚Üêfinset.sum_sub_distrib, finset.sum_congr rfl],
  intros i hi,
  rw div_right_comm,
  ring,
end

def chebyshev_first (x : ‚Ñù) : ‚Ñù := ‚àë n in (finset.range (‚åäx‚åã‚Çä + 1)).filter nat.prime, real.log n
def chebyshev_second (x : ‚Ñù) : ‚Ñù := ‚àë n in finset.range (‚åäx‚åã‚Çä + 1), Œõ n
def chebyshev_first' (x : ‚Ñù) : ‚Ñù := ‚àë n in (finset.range ‚åäx‚åã‚Çä).filter nat.prime, real.log n
def chebyshev_second' (x : ‚Ñù) : ‚Ñù := ‚àë n in finset.range ‚åäx‚åã‚Çä, Œõ n
localized "notation `œë` := chebyshev_first" in analytic_number_theory
localized "notation `œà` := chebyshev_second" in analytic_number_theory
localized "notation `œë'` := chebyshev_first'" in analytic_number_theory
localized "notation `œà'` := chebyshev_second'" in analytic_number_theory

lemma chebyshev_first_eq {x : ‚Ñù} :
  œë x = ‚àë n in (finset.range (‚åäx‚åã‚Çä + 1)).filter nat.prime, Œõ n :=
finset.sum_congr rfl (by simp [von_mangoldt_apply_prime] {contextual := tt})

lemma chebyshev_first'_eq {x : ‚Ñù} :
  œë' x = ‚àë n in (finset.range ‚åäx‚åã‚Çä).filter nat.prime, Œõ n :=
finset.sum_congr rfl (by simp [von_mangoldt_apply_prime] {contextual := tt})

lemma chebyshev_first_le_chebyshev_second : œë ‚â§ œà :=
begin
  intro x,
  rw chebyshev_first_eq,
  exact finset.sum_le_sum_of_subset_of_nonneg (finset.filter_subset _ _)
    (Œª _ _ _, von_mangoldt_nonneg),
end

lemma chebyshev_first'_le_chebyshev_second' : œë' ‚â§ œà' :=
begin
  intro x,
  rw chebyshev_first'_eq,
  exact finset.sum_le_sum_of_subset_of_nonneg (finset.filter_subset _ _)
    (Œª _ _ _, von_mangoldt_nonneg),
end

lemma chebyshev_first_nonneg : 0 ‚â§ œë :=
Œª x, by { rw chebyshev_first_eq, exact finset.sum_nonneg' (Œª _, von_mangoldt_nonneg) }

lemma chebyshev_first'_nonneg : 0 ‚â§ œë' :=
Œª x, by { rw chebyshev_first'_eq, exact finset.sum_nonneg' (Œª _, von_mangoldt_nonneg) }

lemma chebyshev_second_nonneg : 0 ‚â§ œà :=
Œª x, finset.sum_nonneg' (Œª _, von_mangoldt_nonneg)

lemma chebyshev_second'_nonneg : 0 ‚â§ œà' :=
Œª x, finset.sum_nonneg' (Œª _, von_mangoldt_nonneg)

lemma log_nat_nonneg : ‚àÄ (n : ‚Ñï), 0 ‚â§ log (n : ‚Ñù)
| 0 := by simp
| (n+1) := log_nonneg (by simp)

lemma chebyshev_first_monotone : monotone œë :=
begin
  intros x‚ÇÅ x‚ÇÇ h,
  apply finset.sum_le_sum_of_subset_of_nonneg,
  { apply finset.filter_subset_filter _ (finset.range_mono (add_le_add_right _ _)),
    exact nat.floor_mono h },
  rintro i - -,
  apply log_nat_nonneg,
end

lemma is_O_chebyshev_first_chebyshev_second : is_O at_top œë œà :=
is_O_of_le _
  (Œª x, by { rw [norm_of_nonneg (chebyshev_first_nonneg _),
                 norm_of_nonneg (chebyshev_second_nonneg _)],
             exact chebyshev_first_le_chebyshev_second _ })

lemma chebyshev_second_eq_summatory : œà = summatory Œõ 1 :=
begin
  ext x,
  rw [chebyshev_second, summatory, eq_comm, finset.sum_subset_zero_on_sdiff],
  { exact finset.Icc_subset_range_add_one },
  { intros y hy,
    rw [finset.mem_sdiff, finset.mem_range, finset.mem_Icc, nat.lt_add_one_iff, not_and', not_le,
      nat.lt_one_iff] at hy,
    rw hy.2 hy.1,
    simp },
  { intros,
    refl }
end

@[simp] lemma chebyshev_first_zero : œë 0 = 0 :=
by simp [chebyshev_first_eq, finset.filter_singleton, nat.not_prime_zero]
@[simp] lemma chebyshev_second_zero : œà 0 = 0 := by simp [chebyshev_second]
@[simp] lemma chebyshev_first'_zero : œë' 0 = 0 := by simp [chebyshev_first']
@[simp] lemma chebyshev_second'_zero : œà' 0 = 0 := by simp [chebyshev_second']

lemma chebyshev_lower_aux {x : ‚Ñù} (hx : 0 < x) :
  chebyshev_error x ‚â§ œà x - real.log 2 * x :=
begin
  rw [le_sub_iff_add_le', ‚Üêvon_mangoldt_floor_sum hx, chebyshev_second_eq_summatory],
  apply finset.sum_le_sum,
  intros i hi,
  apply mul_le_of_le_one_right von_mangoldt_nonneg,
  norm_cast,
  apply helpful_floor_identity,
end

lemma chebyshev_upper_aux {x : ‚Ñù} (hx : 0 < x) :
  œà x - œà (x / 2) - real.log 2 * x ‚â§ chebyshev_error x :=
begin
  rw [sub_le_iff_le_add', ‚Üêvon_mangoldt_floor_sum hx, chebyshev_second_eq_summatory, summatory],
  have : finset.Icc 1 ‚åäx/2‚åã‚Çä ‚äÜ finset.Icc 1 ‚åäx‚åã‚Çä,
  { exact finset.Icc_subset_Icc le_rfl (nat.floor_mono (half_le_self hx.le)) },
  rw [summatory, ‚Üêfinset.sum_sdiff this, add_sub_cancel],
  refine (finset.sum_le_sum _).trans
    (finset.sum_le_sum_of_subset_of_nonneg (finset.sdiff_subset _ _) _),
  { simp_rw [finset.mem_sdiff, finset.mem_Icc, and_imp, not_and, not_le, nat.le_floor_iff hx.le,
      nat.floor_lt (div_nonneg hx.le zero_le_two), nat.succ_le_iff],
    intros i hi‚ÇÅ hi‚ÇÇ hi‚ÇÉ,
    replace hi‚ÇÉ := hi‚ÇÉ hi‚ÇÅ,
    norm_cast,
    rw [helpful_floor_identity2, int.cast_one, mul_one],
    { refine (one_le_div _).2 hi‚ÇÇ,
      rwa [nat.cast_pos] },
    rwa [div_lt_iff, ‚Üêdiv_lt_iff'],
    { norm_num1 },
    rwa [nat.cast_pos] },
  rintro i - -,
  apply mul_nonneg von_mangoldt_nonneg _,
  rw sub_nonneg,
  norm_cast,
  apply helpful_floor_identity3,
end

lemma chebyshev_error_O :
  is_O at_top chebyshev_error log :=
begin
  have t : (2 : ‚Ñù) < 3 := by norm_num,
  refine (summatory_log t).is_O.sub (is_O.const_mul_left _ _),
  refine ((summatory_log t).is_O.comp_tendsto (tendsto_id.at_top_div_const zero_lt_two)).trans _,
  apply is_O.of_bound 1,
  filter_upwards [eventually_ge_at_top (2 : ‚Ñù)],
  intros x hx,
  rw [function.comp_app, id.def, one_mul, norm_of_nonneg (log_nonneg _),
    norm_of_nonneg (log_nonneg _), log_le_log];
  linarith
end

lemma chebyshev_lower_explicit {c : ‚Ñù} (hc : c < real.log 2) :
  ‚àÄ·∂† x : ‚Ñù in at_top, c * x ‚â§ œà x :=
begin
  have h‚ÇÅ := (chebyshev_error_O.trans_is_o is_o_log_id_at_top).bound (sub_pos_of_lt hc),
  filter_upwards [eventually_ge_at_top (1 : ‚Ñù), h‚ÇÅ],
  intros x hx‚ÇÅ hx‚ÇÇ,
  rw [id.def, norm_of_nonneg (zero_le_one.trans hx‚ÇÅ), real.norm_eq_abs] at hx‚ÇÇ,
  have := (neg_le_of_abs_le hx‚ÇÇ).trans (chebyshev_lower_aux (zero_lt_one.trans_le hx‚ÇÅ)),
  linarith,
end

lemma chebyshev_lower :
  is_O at_top id œà :=
begin
  rw [is_O_iff],
  refine ‚ü®(real.log 2 / 2)‚Åª¬π, _‚ü©,
  filter_upwards [eventually_ge_at_top (0 : ‚Ñù),
    chebyshev_lower_explicit (half_lt_self (log_pos one_lt_two))],
  intros x hx‚ÇÅ hx‚ÇÇ,
  rw [mul_comm, ‚Üêdiv_eq_mul_inv, le_div_iff' (div_pos (log_pos one_lt_two) zero_lt_two),
    id.def, norm_of_nonneg hx‚ÇÅ, real.norm_eq_abs],
  exact hx‚ÇÇ.trans (le_abs_self _),
end

lemma chebyshev_trivial_upper_nat (n : ‚Ñï) :
  œà n ‚â§ n * real.log n :=
begin
  rw [chebyshev_second_eq_summatory, summatory_nat, ‚Üênsmul_eq_mul],
  apply (finset.sum_le_card_nsmul _ _ (real.log n) (Œª i hi, _)).trans _,
  { apply von_mangoldt_upper.trans,
    simp only [finset.mem_Icc] at hi,
    exact (log_le_log (nat.cast_pos.2 hi.1) (nat.cast_pos.2 (hi.1.trans hi.2))).2
      (nat.cast_le.2 hi.2) },
  simp
end

lemma chebyshev_trivial_upper {x : ‚Ñù} (hx : 1 ‚â§ x) :
  œà x ‚â§ x * log x :=
begin
  have hx‚ÇÄ : 0 < x := zero_lt_one.trans_le hx,
  rw [chebyshev_second_eq_summatory, summatory_eq_floor, ‚Üêchebyshev_second_eq_summatory],
  apply (chebyshev_trivial_upper_nat _).trans _,
  exact mul_le_mul (nat.floor_le hx‚ÇÄ.le)
    ((log_le_log (by rwa [nat.cast_pos, nat.floor_pos]) hx‚ÇÄ).2 (nat.floor_le hx‚ÇÄ.le))
    (log_nonneg (by rwa [nat.one_le_cast, nat.le_floor_iff hx‚ÇÄ.le, nat.cast_one])) hx‚ÇÄ.le,
end

lemma chebyshev_upper_inductive {c : ‚Ñù} (hc : real.log 2 < c) :
  ‚àÉ C, 1 ‚â§ C ‚àß ‚àÄ x : ‚Ñï, œà x ‚â§ 2 * c * x + C * log C :=
begin
  have h‚ÇÅ := (chebyshev_error_O.trans_is_o is_o_log_id_at_top).bound (sub_pos_of_lt hc),
  -- Pull out the constant from h‚ÇÅ. I'd like to use `eventually_at_top` but to make sure the
  -- constant is big, I go via `at_top_basis'` instead.
  obtain ‚ü®C, hC‚ÇÅ, hC : ‚àÄ x, C ‚â§ x ‚Üí _ ‚â§ _ * ‚à•x‚à•‚ü© := (at_top_basis' 1).mem_iff.1 h‚ÇÅ,
  refine ‚ü®C, hC‚ÇÅ, _‚ü©,
  intro n,
  apply nat.strong_induction_on n, clear n,
  intros n ih,
  cases le_or_lt (n : ‚Ñù) C with hn hn,
  -- Do the case n ‚â§ C first.
  { rw chebyshev_second_eq_summatory,
    refine (summatory_monotone_of_nonneg _ _ _ hn).trans _,
    { exact Œª _, von_mangoldt_nonneg },
    rw ‚Üêchebyshev_second_eq_summatory,
    refine (chebyshev_trivial_upper hC‚ÇÅ).trans _,
    refine le_add_of_nonneg_left (mul_nonneg _ (nat.cast_nonneg _)),
    exact mul_nonneg zero_le_two ((log_nonneg one_le_two).trans hc.le) },
  have hn' : 0 < n := nat.succ_le_iff.2 (nat.one_le_cast.1 (hC‚ÇÅ.trans hn.le)),
  have h‚ÇÅ := chebyshev_upper_aux (nat.cast_pos.2 hn'),
  rw [sub_sub, sub_le_iff_le_add] at h‚ÇÅ,
  apply h‚ÇÅ.trans, clear h‚ÇÅ,
  rw [chebyshev_second_eq_summatory, summatory_eq_floor, ‚Üênat.cast_two, nat.floor_div_eq_div,
    nat.cast_two, ‚Üêadd_assoc],
  have h‚ÇÉ := hC _ hn.le,
  rw real.norm_eq_abs at h‚ÇÉ,
  replace h‚ÇÉ := le_of_abs_le h‚ÇÉ,
  have h‚ÇÇ := ih (n / 2) (nat.div_lt_self hn' one_lt_two),
  rw ‚Üêchebyshev_second_eq_summatory,
  apply (add_le_add_right (add_le_add h‚ÇÉ h‚ÇÇ) _).trans,
  rw [add_right_comm, ‚Üêadd_assoc, add_le_add_iff_right, norm_coe_nat, ‚Üêadd_mul, sub_add_cancel,
    mul_assoc _ c n, two_mul (_ * _), add_le_add_iff_left, mul_assoc, mul_left_comm],
  apply mul_le_mul_of_nonneg_left _ (le_trans (log_nonneg one_le_two) hc.le),
  rw ‚Üêle_div_iff' (zero_lt_two : (0 : ‚Ñù) < 2),
  { convert nat.cast_div_le,
    simp },
  apply_instance,
end

lemma chebyshev_upper_real {c : ‚Ñù} (hc : 2 * real.log 2 < c) :
  ‚àÉ C, 1 ‚â§ C ‚àß is_O_with 1 at_top œà (Œª x, c * x + C * log C) :=
begin
  have hc' : real.log 2 < c / 2 := by rwa lt_div_iff' (zero_lt_two : (0 : ‚Ñù) < _),
  obtain ‚ü®C, hC‚ÇÅ, hC‚ü© := chebyshev_upper_inductive hc',
  refine ‚ü®C, hC‚ÇÅ, _‚ü©,
  rw [is_O_with_iff, eventually_at_top],
  refine ‚ü®0, Œª x hx, _‚ü©,
  rw [norm_of_nonneg (chebyshev_second_nonneg x), chebyshev_second_eq_summatory, summatory_eq_floor,
    ‚Üêchebyshev_second_eq_summatory, one_mul],
  refine (hC ‚åäx‚åã‚Çä).trans (le_trans _ (le_abs_self _)),
  rw [mul_div_cancel' _ (@two_ne_zero ‚Ñù _ _), add_le_add_iff_right],
  refine mul_le_mul_of_nonneg_left (nat.floor_le hx) _,
  exact (mul_nonneg (zero_le_two : (0 : ‚Ñù) ‚â§ 2) (log_nonneg one_le_two)).trans hc.le,
end

lemma chebyshev_upper_explicit {c : ‚Ñù} (hc : 2 * real.log 2 < c) :
  is_O_with c at_top œà id :=
begin
  let c' := real.log 2 + c/2,
  have hc'‚ÇÅ : c' < c,
  { rwa [‚Üêlt_sub_iff_add_lt, sub_half, lt_div_iff' (@zero_lt_two ‚Ñù _ _)] },
  have hc'‚ÇÇ : 2 * real.log 2 < c',
  { rwa [‚Üêsub_lt_iff_lt_add', two_mul, add_sub_cancel, lt_div_iff' (@zero_lt_two ‚Ñù _ _)] },
  obtain ‚ü®C, hC‚ÇÅ, hC‚ü© := chebyshev_upper_real hc'‚ÇÇ,
  refine (hC.trans _ zero_le_one).congr_const (one_mul _),
  apply (is_O_with_const_mul_self c' _ _).add_is_o (is_o_const_of_tendsto_at_top _ _ tendsto_id _),
  rwa [real.norm_eq_abs, abs_of_nonneg],
  exact le_trans (mul_nonneg zero_le_two (log_nonneg one_le_two)) hc'‚ÇÇ.le,
end

lemma chebyshev_upper : is_O at_top œà id :=
(chebyshev_upper_explicit (lt_add_one _)).is_O

lemma chebyshev_first_upper : is_O at_top œë id :=
is_O_chebyshev_first_chebyshev_second.trans chebyshev_upper

lemma is_O_sum_one_of_summable {f : ‚Ñï ‚Üí ‚Ñù} (hf : summable f) :
  is_O at_top (Œª (n : ‚Ñï), ‚àë i in finset.range n, f i) (Œª _, (1 : ‚Ñù)) :=
is_O_one_of_tendsto _ hf.has_sum.tendsto_sum_nat

lemma log_le_thing {x : ‚Ñù} (hx : 1 ‚â§ x) :
  log x ‚â§ x^(1/2 : ‚Ñù) - x^(-1/2 : ‚Ñù) :=
begin
  set f : ‚Ñù ‚Üí ‚Ñù := log,
  set g : ‚Ñù ‚Üí ‚Ñù := Œª x, x^(1/2 : ‚Ñù) - x^(-1/2 : ‚Ñù),
  set f' : ‚Ñù ‚Üí ‚Ñù := has_inv.inv,
  set g' : ‚Ñù ‚Üí ‚Ñù := Œª x, 1/2 * x ^ (-3/2 : ‚Ñù) + 1/2 * x^(-1/2 : ‚Ñù),
  suffices : ‚àÄ y ‚àà Icc 1 x, f y ‚â§ g y,
  { exact this x ‚ü®hx, le_rfl‚ü© },
  have f_deriv : ‚àÄ y ‚àà Ico 1 x, has_deriv_within_at f (f' y) (Ici y) y,
  { intros y hy,
    exact (has_deriv_at_log (zero_lt_one.trans_le hy.1).ne').has_deriv_within_at },
  have g_deriv : ‚àÄ y ‚àà Ico 1 x, has_deriv_within_at g (g' y) (Ici y) y,
  { intros y hy,
    have hy' : 0 < y := zero_lt_one.trans_le hy.1,
    change has_deriv_within_at _ (_ + _) _ _,
    rw [add_comm, ‚Üêsub_neg_eq_add, neg_mul_eq_neg_mul],
    refine has_deriv_within_at.sub _ _,
    { convert (has_deriv_within_at_id _ _).rpow_const (or.inl hy'.ne'); norm_num1 },
    { convert (has_deriv_within_at_id _ _).rpow_const (or.inl hy'.ne'); norm_num1 } },
  refine image_le_of_deriv_right_le_deriv_boundary _ f_deriv (by simp [f]) _ g_deriv _,
  { exact continuous_on_log.mono (Œª y hy, (zero_lt_one.trans_le hy.1).ne') },
  { exact (continuous_on_id.rpow_const (by simp)).sub
      (continuous_on_id.rpow_const (Œª y hy, or.inl (zero_lt_one.trans_le hy.1).ne')) },
  intros y hy,
  dsimp [f', g'],
  rw [‚Üêmul_add, mul_comm, ‚Üêdiv_eq_mul_one_div, le_div_iff' (@zero_lt_two ‚Ñù _ _), ‚Üêsub_nonneg,
    ‚Üêrpow_neg_one],
  convert sq_nonneg (y ^ (- 1 / 4 : ‚Ñù) - y^(- 3 / 4 : ‚Ñù)) using 1,
  have hy' : 0 < y := zero_lt_one.trans_le hy.1,
  rw [sub_sq, ‚Üêrpow_nat_cast, ‚Üêrpow_nat_cast, nat.cast_two, ‚Üêrpow_mul hy'.le, mul_assoc,
    ‚Üêrpow_add hy', ‚Üêrpow_mul hy'.le],
  norm_num,
  ring,
end

lemma log_div_sq_sub_le {x : ‚Ñù} (hx : 1 < x) :
  log x * ((x‚Åª¬π)^2 / (1 - x‚Åª¬π)) ‚â§ x^(-3/2 : ‚Ñù) :=
begin
  have hx' : x ‚â† 0 := by linarith,
  rw [inv_eq_one_div, one_sub_div hx', div_div_eq_mul_div, one_div, sq, inv_mul_cancel_right‚ÇÄ hx',
    ‚Üêone_div, div_div, ‚Üêdiv_eq_mul_one_div, div_le_iff, ‚Üêmul_assoc, ‚Üêrpow_add_one hx',
    mul_sub, ‚Üêrpow_add_one hx', mul_one],
  { convert log_le_thing hx.le;
    norm_num1 },
  nlinarith,
end

open finset

@[to_additive]
lemma prod_prime_powers' {M : Type*} [comm_monoid M] {x : ‚Ñï} {f : ‚Ñï ‚Üí M} :
  ‚àè n in (finset.Icc 1 x).filter is_prime_pow, f n =
    ‚àè p in (finset.Icc 1 x).filter nat.prime,
      ‚àè k in (finset.Icc 1 x).filter (Œª k, p ^ k ‚â§ x), f (p ^ k) :=
begin
  rw [finset.prod_sigma', eq_comm],
  refine finset.prod_bij (Œª pk _, pk.1 ^ pk.2) _ _ _ _,
  { rintro ‚ü®p, k‚ü© hpk,
    simp only [finset.mem_sigma, finset.mem_filter, finset.mem_Icc] at hpk,
    simp only [finset.mem_filter, finset.mem_Icc, is_prime_pow_nat_iff],
    exact ‚ü®‚ü®nat.one_le_pow _ _ hpk.1.1.1, hpk.2.2‚ü©, p, k, hpk.1.2, hpk.2.1.1, rfl‚ü© },
  { simp only [nat.cast_pow, eq_self_iff_true, implies_true_iff] },
  { rintro ‚ü®p‚ÇÅ, k‚ÇÅ‚ü© ‚ü®p‚ÇÇ, k‚ÇÇ‚ü© h‚ÇÅ h‚ÇÇ t,
    simp only [finset.mem_sigma, finset.mem_filter, finset.mem_Icc] at h‚ÇÅ h‚ÇÇ,
    simp only at t,
    cases eq_of_prime_pow_eq (nat.prime_iff.1 h‚ÇÅ.1.2) (nat.prime_iff.1 h‚ÇÇ.1.2) h‚ÇÅ.2.1.1 t,
    rw (nat.pow_right_strict_mono h‚ÇÅ.1.2.two_le).injective t },
  { simp only [is_prime_pow_nat_iff_bounded, finset.mem_filter, finset.mem_Icc, and_imp,
      exists_and_distrib_left, finset.mem_sigma, exists_prop, sigma.exists, forall_exists_index,
      and_assoc],
    rintro _ hpk‚ÇÅ hpk‚ÇÇ p hpn k hkn hp hk rfl,
    exact ‚ü®p, hp.pos, hpn.trans hpk‚ÇÇ, hp, k, hk, hkn.trans hpk‚ÇÇ, hpk‚ÇÇ, rfl‚ü© },
end

@[to_additive]
lemma prod_prime_powers {M : Type*} [comm_monoid M] {x : ‚Ñù} {f : ‚Ñï ‚Üí M} :
  ‚àè n in (finset.Icc 1 ‚åäx‚åã‚Çä).filter is_prime_pow, f n =
    ‚àè p in (finset.Icc 1 ‚åäx‚åã‚Çä).filter nat.prime,
      ‚àè k in (finset.Icc 1 ‚åäx‚åã‚Çä).filter (Œª k, (p ^ k : ‚Ñù) ‚â§ x), f (p ^ k) :=
begin
  rw prod_prime_powers',
  refine finset.prod_congr rfl _,
  intros p hp,
  refine finset.prod_congr (filter_congr _) (Œª _ _, rfl),
  intros k hk,
  rw [nat.le_floor_iff', nat.cast_pow],
  rw mem_filter at hp,
  exact pow_ne_zero _ hp.2.ne_zero,
end

@[to_additive]
lemma exact_prod_prime_powers {M : Type*} [comm_monoid M] {x : ‚Ñù} {f : ‚Ñï ‚Üí M} :
  ‚àè n in (finset.Icc 1 ‚åäx‚åã‚Çä).filter is_prime_pow, f n =
    ‚àè p in (finset.Icc 1 ‚åäx‚åã‚Çä).filter nat.prime,
      ‚àè k in (finset.Icc 1 ‚åälog x / real.log p‚åã‚Çä), f (p ^ k) :=
begin
  refine prod_prime_powers.trans (finset.prod_congr rfl (Œª p hp, finset.prod_congr _ (Œª _ _, rfl))),
  rw [mem_filter, finset.mem_Icc, and_assoc] at hp,
  rcases hp with ‚ü®hp‚ÇÅ, hp‚ÇÇ, hp‚ü©,
  rw nat.le_floor_iff' hp.ne_zero at hp‚ÇÇ,
  ext k,
  have hx : 0 < x := zero_lt_one.trans_le ((nat.one_le_cast.2 hp‚ÇÅ).trans hp‚ÇÇ),
  rw [mem_filter, finset.mem_Icc, finset.mem_Icc, nat.le_floor_iff hx.le, and_assoc,
    and_congr_right (Œª hk, _)],
  rw [nat.le_floor_iff' (nat.succ_le_iff.1 hk).ne', log_div_log, le_logb_iff_rpow_le _ hx,
    rpow_nat_cast, and_iff_right_iff_imp],
  { intros hk',
    apply le_trans _ hk',
    exact_mod_cast (k.lt_pow_self hp.one_lt).le },
  exact_mod_cast hp.one_lt,
end

theorem geom_sum_Ico'_le {Œ± : Type*} [linear_ordered_field Œ±]
  {x : Œ±} (hx‚ÇÄ : 0 ‚â§ x) (hx‚ÇÅ : x < 1) {m n : ‚Ñï} (hmn : m ‚â§ n) :
  ‚àë i in finset.Ico m n, x ^ i ‚â§ x ^ m / (1 - x) :=
begin
  rw [geom_sum_Ico' hx‚ÇÅ.ne hmn, div_le_div_right, sub_le_self_iff],
  { apply pow_nonneg hx‚ÇÄ },
  rwa sub_pos,
end

lemma abs_von_mangoldt_div_self_sub_log_div_self_le {x : ‚Ñù} :
  |‚àë n in Icc 1 ‚åäx‚åã‚Çä, Œõ n / n - ‚àë p in filter nat.prime (Icc 1 ‚åäx‚åã‚Çä), real.log p / p| ‚â§
    ‚àë n in Icc 1 ‚åäx‚åã‚Çä, n ^ (- 3 / 2 : ‚Ñù) :=
begin
  have h‚ÇÅ : ‚àë n in Icc 1 ‚åäx‚åã‚Çä, Œõ n / n = ‚àë n in filter is_prime_pow (Icc 1 ‚åäx‚åã‚Çä), Œõ n / n,
  { simp only [sum_filter_of_ne, div_ne_zero_iff, von_mangoldt_ne_zero_iff, implies_true_iff]
    { contextual := tt } },
  have h‚ÇÇ : ‚àë p in filter nat.prime (Icc 1 ‚åäx‚åã‚Çä), real.log p / p =
          ‚àë p in filter nat.prime (Icc 1 ‚åäx‚åã‚Çä), Œõ p / p,
  { refine sum_congr rfl (Œª p hp, _),
    rw von_mangoldt_apply_prime (mem_filter.1 hp).2 },
  rw [h‚ÇÅ, h‚ÇÇ, sum_prime_powers, ‚Üêsum_sub_distrib, sum_filter],
  apply (abs_sum_le_sum_abs _ _).trans _,
  apply sum_le_sum,
  simp only [finset.mem_Icc, nat.cast_pow, and_imp],
  intros p hp‚ÇÅ hp‚ÇÇ,
  split_ifs,
  { have hp‚ÇÉ := (nat.le_floor_iff' h.ne_zero).1 hp‚ÇÇ,
    have : insert 1 (filter (Œª k, (p ^ k : ‚Ñù) ‚â§ x) (Icc 2 ‚åäx‚åã‚Çä)) =
            filter (Œª k, (p ^ k : ‚Ñù) ‚â§ x) (Icc 1 ‚åäx‚åã‚Çä),
    { rwa [nat.Icc_succ_left 1, ‚Üêfinset.Ioc_insert_left (hp‚ÇÅ.trans hp‚ÇÇ), filter_insert, pow_one,
        if_pos] },
    have h1 : 1 ‚àâ filter (Œª (k : ‚Ñï), (p ^ k : ‚Ñù) ‚â§ x) (Icc 2 ‚åäx‚åã‚Çä),
    { simp [not_and_distrib] },
    rw [‚Üêthis, sum_insert h1, add_comm, pow_one, pow_one, add_sub_cancel],
    apply (abs_sum_le_sum_abs _ _).trans _,
    refine (sum_le_sum_of_subset_of_nonneg (filter_subset _ _) _).trans _,
    { simp only [abs_nonneg, implies_true_iff] },
    have : (‚àë i in Icc 2 ‚åäx‚åã‚Çä, |Œõ (p ^ i) / p ^ i|) = ‚àë i in Icc 2 ‚åäx‚åã‚Çä, Œõ p / p ^ i,
    { refine finset.sum_congr rfl (Œª k hk, _),
      rw [von_mangoldt_apply_pow (zero_lt_two.trans_le (finset.mem_Icc.1 hk).1).ne', abs_div,
        abs_of_nonneg von_mangoldt_nonneg, abs_pow, nat.abs_cast] },
    rw [this, von_mangoldt_apply_prime h],
    simp only [div_eq_mul_inv (log (p : ‚Ñù)), ‚Üêmul_sum, ‚Üêinv_pow],
    apply le_trans _ (log_div_sq_sub_le (nat.one_lt_cast.2 h.one_lt)),
    rw [‚Üênat.Ico_succ_right],
    refine mul_le_mul_of_nonneg_left (geom_sum_Ico'_le _ _ _) _;
    simp only [inv_nonneg, nat.succ_le_succ_iff, log_nonneg, hp‚ÇÅ.trans hp‚ÇÇ, nat.cast_nonneg,
      inv_lt_one, h.one_lt, nat.one_lt_cast, nat.one_le_cast, hp‚ÇÅ] },
  rw abs_zero,
  exact rpow_nonneg_of_nonneg (nat.cast_nonneg _) _,
end

lemma is_O_von_mangoldt_div_self_sub_log_div_self :
  is_O at_top
    (Œª x, ‚àë n in Icc 1 ‚åäx‚åã‚Çä, Œõ n * n‚Åª¬π - ‚àë p in filter nat.prime (Icc 1 ‚åäx‚åã‚Çä), real.log p * p‚Åª¬π)
    (Œª _ : ‚Ñù, (1 : ‚Ñù)) :=
begin
  have : ‚àÄ x : ‚Ñù,
    ‚à•‚àë n in Icc 1 ‚åäx‚åã‚Çä, Œõ n / n - ‚àë p in filter nat.prime (Icc 1 ‚åäx‚åã‚Çä), real.log p / p‚à•
      ‚â§ ‚à•(‚àë n in range (‚åäx‚åã‚Çä + 1), n ^ (- 3 / 2 : ‚Ñù) : ‚Ñù)‚à•,
  { intro x,
    rw [real.norm_eq_abs, real.norm_eq_abs],
    apply abs_von_mangoldt_div_self_sub_log_div_self_le.trans (le_trans _ (le_abs_self _)),
    rw [range_eq_Ico, nat.Ico_succ_right],
    exact sum_mono_set_of_nonneg (by simp [rpow_nonneg_of_nonneg])
      (Icc_subset_Icc_left zero_le_one) },
  refine (is_O_of_le at_top this).trans _,
  have : (-3/2 : ‚Ñù) < -1 := by norm_num1,
  have z : tendsto (Œª x : ‚Ñù, finset.range (‚åäx‚åã‚Çä + 1)) at_top at_top :=
    tendsto_finset_range.comp (tendsto_at_top_add_nonneg_right tendsto_nat_floor_at_top (by simp)),
  exact (is_O_one_of_tendsto _ ((real.summable_nat_rpow.2 this).has_sum.comp z)),
end

lemma summatory_log_sub :
  is_O at_top (Œª x, (‚àë n in Icc 1 ‚åäx‚åã‚Çä, log (n : ‚Ñù)) - x * ‚àë n in Icc 1 ‚åäx‚åã‚Çä, Œõ n * n‚Åª¬π) (Œª x, x) :=
begin
  have : ‚àÄ (x : ‚Ñù), 0 ‚â§ x ‚Üí
    |(‚àë n in Icc 1 ‚åäx‚åã‚Çä, log (n : ‚Ñù)) - x * ‚àë n in Icc 1 ‚åäx‚åã‚Çä, Œõ n / n| ‚â§
      ‚àë (n : ‚Ñï) in Icc 1 ‚åäx‚åã‚Çä, Œõ n,
  { intros x hx,
    rw [‚Üêsummatory, ‚Üêvon_mangoldt_summatory hx le_rfl, mul_sum, summatory, ‚Üêsum_sub_distrib],
    refine (abs_sum_le_sum_abs _ _).trans _,
    simp only [mul_div_left_comm x, abs_sub_comm, ‚Üêmul_sub, abs_mul, von_mangoldt_nonneg,
      abs_of_nonneg, int.self_sub_floor, int.fract_nonneg],
    refine finset.sum_le_sum (Œª n hn, _),
    exact mul_le_of_le_one_right von_mangoldt_nonneg (int.fract_lt_one _).le },
  apply is_O.trans _ chebyshev_upper,
  apply is_O.of_bound 1,
  filter_upwards [eventually_ge_at_top (0 : ‚Ñù)] with x hx,
  rw [one_mul, norm_eq_abs, chebyshev_second_eq_summatory,
    norm_of_nonneg (summatory_nonneg _ _ _ _)],
  { exact this _ hx },
  { exact Œª _, von_mangoldt_nonneg }
end

lemma is_O_von_mangoldt_div_self :
  is_O at_top (Œª x : ‚Ñù, ‚àë n in Icc 1 ‚åäx‚åã‚Çä, Œõ n * n‚Åª¬π - log x) (Œª _, (1 : ‚Ñù)) :=
begin
  suffices : is_O at_top (Œª x : ‚Ñù, x * ‚àë n in Icc 1 ‚åäx‚åã‚Çä, Œõ n * n‚Åª¬π - x * log x) (Œª x, x),
  { refine ((is_O_refl (Œª (x : ‚Ñù), x‚Åª¬π) _).mul this).congr' _ _,
    { filter_upwards [eventually_gt_at_top (0 : ‚Ñù)] with x hx,
      rw [‚Üêmul_sub, inv_mul_cancel_left‚ÇÄ hx.ne'] },
    { filter_upwards [eventually_gt_at_top (0 : ‚Ñù)] with x hx,
      rw inv_mul_cancel hx.ne' } },
  refine summatory_log_sub.symm.triangle _,
  have h‚ÇÅ := (summatory_log (lt_add_one _)).is_O,
  apply ((h‚ÇÅ.trans is_o_log_id_at_top.is_O).sub (is_O_refl _ _)).congr_left _,
  intro x,
  dsimp only [summatory, id.def],
  ring
end

/--
Given a function `a : ‚Ñï ‚Üí M` from the naturals into an additive commutative monoid, this expresses
‚àë k ‚â§ p ‚â§ x, a(p) where `p` is prime.
-/
def prime_summatory {M : Type*} [add_comm_monoid M] (a : ‚Ñï ‚Üí M) (k : ‚Ñï) (x : ‚Ñù) : M :=
  ‚àë n in (finset.Icc k ‚åäx‚åã‚Çä).filter nat.prime, a n
-- BM: equivalently could say it's `summatory (Œª n, if (a n).prime then a n else 0) x`

lemma prime_summatory_eq_summatory :
  prime_summatory a = summatory (Œª n, if n.prime then a n else 0) :=
begin
  ext k x,
  exact finset.sum_filter _ _,
end

lemma prime_summatory_one_eq_prime_summatory_two {M : Type*} [add_comm_monoid M] (a : ‚Ñï ‚Üí M) :
  prime_summatory a 1 = prime_summatory a 2 :=
begin
  ext x,
  rw [prime_summatory, prime_summatory],
  refine (sum_subset_zero_on_sdiff (filter_subset_filter _ (finset.Icc_subset_Icc_left one_le_two))
    (Œª y hy, _) (Œª _ _, rfl)).symm,
  simp only [mem_sdiff, mem_filter, finset.mem_Icc, and_imp, not_and', not_le,
    nat.lt_add_one_iff] at hy {contextual := tt},
  cases hy.1.2.ne_one ((hy.2 hy.1.2 hy.1.1.2).antisymm hy.1.1.1),
end

lemma log_reciprocal :
  is_O at_top (Œª x, prime_summatory (Œª p, real.log p / p) 1 x - log x) (Œª _, (1 : ‚Ñù)) :=
is_O_von_mangoldt_div_self_sub_log_div_self.symm.triangle is_O_von_mangoldt_div_self

open_locale nat

lemma prime_counting_le_self (x : ‚Ñï) : œÄ x ‚â§ x :=
begin
  rw [nat.prime_counting, nat.prime_counting', nat.count_eq_card_filter_range],
  have : (finset.range (x + 1)).filter nat.prime ‚äÜ finset.Ioc 0 x,
  { simp [finset.subset_iff, nat.lt_add_one_iff, nat.prime.pos] {contextual := tt} },
  exact (card_le_of_subset this).trans (by simp),
end

lemma chebyshev_first_eq_prime_summatory :
  œë = prime_summatory (Œª n, real.log n) 1 :=
begin
  ext x,
  rw [chebyshev_first, prime_summatory, eq_comm, finset.sum_subset_zero_on_sdiff],
  { exact filter_subset_filter _ finset.Icc_subset_range_add_one },
  { simp [nat.lt_add_one_iff, imp_false, le_zero_iff] {contextual := tt} },
  { intros, refl }
end

@[simp] lemma prime_counting'_zero : œÄ' 0 = 0 := rfl
@[simp] lemma prime_counting'_one : œÄ' 1 = 0 := rfl
@[simp] lemma prime_counting'_two : œÄ' 2 = 0 := rfl
@[simp] lemma prime_counting_zero : œÄ 0 = 0 := rfl
@[simp] lemma prime_counting_one : œÄ 1 = 0 := rfl

local attribute [pp_nodot] nat.prime_counting

lemma chebyshev_first_trivial_bound (x : ‚Ñù) :
  œë x ‚â§ œÄ ‚åäx‚åã‚Çä * log x :=
begin
  rcases le_or_lt x 0 with hx | hx,
  { rw [chebyshev_first, nat.floor_eq_zero.2 (hx.trans_lt zero_lt_one)],
    simp [filter_singleton, nat.not_prime_zero] },
  rw [nat.prime_counting, nat.prime_counting', nat.count_eq_card_filter_range, ‚Üênsmul_eq_mul],
  refine sum_le_card_nsmul _ _ (log x) _,
  intros y hy,
  simp only [mem_filter, finset.mem_range, nat.lt_add_one_iff] at hy,
  rw [log_le_log _ hx, ‚Üênat.le_floor_iff'],
  { exact hy.1 },
  { exact hy.2.ne_zero },
  { rw nat.cast_pos,
    exact hy.2.pos },
end

lemma prime_counting_eq_card_primes {x : ‚Ñï} :
  œÄ x = ((finset.Icc 1 x).filter nat.prime).card :=
begin
  rw [nat.prime_counting, nat.prime_counting', nat.count_eq_card_filter_range, range_eq_Ico,
    nat.Ico_succ_right],
  congr' 1,
  simp [finset.ext_iff, nat.one_le_iff_ne_zero, nat.prime.ne_zero] {contextual := tt},
end

lemma prime_counting_eq_prime_summatory {x : ‚Ñï} :
  œÄ x = prime_summatory (Œª _, 1) 1 x :=
by rw [prime_summatory_eq_summatory, summatory, nat.floor_coe, sum_boole, nat.cast_id,
  prime_counting_eq_card_primes]

lemma prime_counting_eq_prime_summatory' {x : ‚Ñù} :
  (œÄ ‚åäx‚åã‚Çä : ‚Ñù) = prime_summatory (Œª _, (1 : ‚Ñù)) 1 x :=
begin
  rw [prime_counting_eq_prime_summatory],
  simp only [nat.cast_one, nat.cast_sum, nat.floor_coe, prime_summatory],
end

lemma chebyshev_first_sub_prime_counting_mul_log_eq {x : ‚Ñù} :
  (œÄ ‚åäx‚åã‚Çä : ‚Ñù) * log x - œë x = ‚à´ t in Icc 1 x, œÄ ‚åät‚åã‚Çä * t‚Åª¬π :=
begin
  have : (Œª (n : ‚Ñï), ite (nat.prime n) (real.log n : ‚Ñù) 0) =
    (Œª n : ‚Ñï, ite (nat.prime n) 1 0 * real.log n),
  { ext n,
    rw boole_mul },
  simp only [chebyshev_first_eq_prime_summatory, prime_summatory_eq_summatory,
    prime_counting_eq_prime_summatory'],
  rw [sub_eq_iff_eq_add, ‚Üêsub_eq_iff_eq_add', this,
    partial_summation_cont' (Œª n, _) real.log (Œª y, y‚Åª¬π) one_ne_zero, nat.cast_one],
  { simp only [nat.cast_one, set.mem_Ici],
    intros y hy,
    apply has_deriv_at_log,
    linarith },
  { simp only [nat.cast_one],
    refine continuous_on_inv‚ÇÄ.mono (Œª y hy, _),
    simp only [mem_compl_eq, mem_singleton_iff, set.mem_Ici] at hy ‚ä¢,
    rintro rfl,
    linarith }
end

lemma is_O_chebyshev_first_sub_prime_counting_mul_log :
  is_O at_top (Œª x, (œÄ ‚åäx‚åã‚Çä : ‚Ñù) * real.log x - œë x) id :=
begin
  simp only [chebyshev_first_sub_prime_counting_mul_log_eq],
  apply is_O.of_bound 1,
  filter_upwards [eventually_gt_at_top (1 : ‚Ñù)],
  intros x hx,
  rw [id.def, one_mul],
  have b‚ÇÅ : ‚àÄ (y : ‚Ñù), 1 ‚â§ y ‚Üí 0 ‚â§ (œÄ ‚åäy‚åã‚Çä : ‚Ñù) * y‚Åª¬π :=
    Œª y hy, mul_nonneg (nat.cast_nonneg _) (inv_nonneg.2 (by linarith)),
  have b‚ÇÉ : (Œª (a : ‚Ñù), (œÄ ‚åäa‚åã‚Çä : ‚Ñù) * a‚Åª¬π) ‚â§·µê[volume.restrict (Icc 1 x)] (Œª x, 1),
  { simp only [eventually_le, ae_restrict_iff', measurable_set_Icc],
    apply eventually_of_forall,
    rintro y ‚ü®hy‚ÇÅ, hy‚ÇÇ‚ü©,
    rw [‚Üêdiv_eq_mul_inv, div_le_one (zero_lt_one.trans_le hy‚ÇÅ)],
    exact le_trans (nat.cast_le.2 (prime_counting_le_self _)) (nat.floor_le (by linarith)) },
  rw [norm_of_nonneg (zero_le_one.trans hx.le),
    norm_of_nonneg (set_integral_nonneg measurable_set_Icc (Œª _ y, b‚ÇÅ _ y.1))],
  refine (integral_mono_of_nonneg _ _ b‚ÇÉ).trans _,
  { simp only [eventually_le, ae_restrict_iff', measurable_set_Icc, pi.zero_apply, set.mem_Icc,
      and_imp],
    refine eventually_of_forall (Œª y hy‚ÇÅ hy‚ÇÇ, _),
    exact mul_nonneg (nat.cast_nonneg _) (inv_nonneg.2 (zero_le_one.trans hy‚ÇÅ)) },
  { simp [integrable_const_iff] },
  { simp [hx.le] },
end

lemma is_O_prime_counting_div_log :
  is_O at_top (Œª x, (œÄ ‚åäx‚åã‚Çä : ‚Ñù)) (Œª x, x / log x) :=
begin
  have : is_O at_top (Œª x, (œÄ ‚åäx‚åã‚Çä : ‚Ñù) * real.log x) id,
  { apply (is_O_chebyshev_first_sub_prime_counting_mul_log.add chebyshev_first_upper).congr_left _,
    simp },
  refine (is_O.mul this (is_O_refl (Œª x, (real.log x)‚Åª¬π) _)).congr' _ _,
  { filter_upwards [eventually_gt_at_top (1 : ‚Ñù)] with x hx,
    rw mul_inv_cancel_right‚ÇÄ (log_pos hx).ne' },
  filter_upwards with x using by simp [div_eq_mul_inv],
end

lemma log_lt_self {x : ‚Ñù} (hx : 0 < x) : log x < x :=
(log_le_sub_one_of_pos hx).trans_lt (by simp)

lemma prime_counting_le_const_mul_div_log :
  ‚àÉ c, 0 < c ‚àß ‚àÄ x : ‚Ñù, (œÄ ‚åäx‚åã‚Çä : ‚Ñù) ‚â§ c * ‚à•x / real.log x‚à• :=
begin
  obtain ‚ü®c‚ÇÄ, hc‚ÇÄ', hc‚ÇÄ‚ü© := is_O_prime_counting_div_log.exists_pos,
  rw [is_O_with_iff, eventually_at_top] at hc‚ÇÄ,
  obtain ‚ü®c‚ÇÅ, hc‚ÇÅ‚ü© := hc‚ÇÄ,
  refine ‚ü®max c‚ÇÄ c‚ÇÅ, lt_max_of_lt_left hc‚ÇÄ', Œª x, _‚ü©,
  simp only [ge_iff_le, norm_coe_nat] at hc‚ÇÅ,
  cases le_total c‚ÇÅ x with h‚ÇÄ h‚ÇÄ,
  { exact (hc‚ÇÅ _ h‚ÇÄ).trans (mul_le_mul_of_nonneg_right (le_max_left _ _) (norm_nonneg _)) },
  rcases lt_trichotomy x 1 with h‚ÇÅ | rfl | h‚ÇÅ,
  { rw [nat.floor_eq_zero.2 h‚ÇÅ, prime_counting_zero, nat.cast_zero],
    exact mul_nonneg (le_max_of_le_left hc‚ÇÄ'.le) (norm_nonneg _) },
  { simp },
  refine (nat.cast_le.2 (prime_counting_le_self ‚åäx‚åã‚Çä)).trans _,
  refine (((nat.floor_le (zero_le_one.trans h‚ÇÅ.le)).trans h‚ÇÄ).trans (le_max_right c‚ÇÄ _)).trans _,
  rw [le_mul_iff_one_le_right (lt_max_of_lt_left hc‚ÇÄ'), norm_div, norm_of_nonneg (log_nonneg h‚ÇÅ.le),
    norm_of_nonneg (zero_le_one.trans h‚ÇÅ.le), one_le_div (log_pos h‚ÇÅ)],
  exact (log_le_sub_one_of_pos (zero_le_one.trans_lt h‚ÇÅ)).trans (by simp),
end

lemma chebyshev_second_eq_sum_chebyshev_first {x : ‚Ñù} (hx : 0 ‚â§ x) :
  œà x = ‚àë k in Icc 1 ‚åälogb 2 x‚åã‚Çä, œë (x ^ (1 / k : ‚Ñù)) :=
begin
  rcases eq_or_lt_of_le hx with rfl | hx,
  { simp },
  simp only [chebyshev_first_eq],
  rw [sum_sigma', chebyshev_second, eq_comm],
  refine sum_bij_ne_zero (Œª pk _ _, pk.2 ^ pk.1) _ _ _ _,
  { rintro ‚ü®k, p‚ü©,
    simp only [mem_sigma, finset.mem_Icc, mem_filter, finset.mem_range, ne.def, and_imp,
      nat.lt_add_one_iff],
    rintro hk‚ÇÅ hk‚ÇÇ hp' hp -,
    apply nat.le_floor,
    rw nat.le_floor_iff' hp.ne_zero at hp',
    rw [nat.cast_pow, ‚Üêrpow_nat_cast],
    refine (rpow_le_rpow (nat.cast_nonneg _) hp' (nat.cast_nonneg _)).trans _,
    rw [‚Üêrpow_mul hx.le, one_div, inv_mul_cancel, rpow_one],
    { rw [nat.cast_ne_zero],
      exact ne_of_gt hk‚ÇÅ } },
  { rintro ‚ü®k‚ÇÅ, p‚ÇÅ‚ü© ‚ü®k‚ÇÇ, p‚ÇÇ‚ü©,
    simp only [one_div, mem_sigma, finset.mem_Icc, mem_filter, finset.mem_range, ne.def, heq_iff_eq,
      and_imp, nat.lt_add_one_iff],
    rintro hk‚ÇÅ hk‚ÇÅ' hp‚ÇÅ' hp‚ÇÅ - hk‚ÇÇ hk‚ÇÇ' hp‚ÇÇ' hp‚ÇÇ - t,
    cases eq_of_prime_pow_eq (nat.prime_iff.1 hp‚ÇÅ) (nat.prime_iff.1 hp‚ÇÇ) hk‚ÇÅ t,
    rw (nat.pow_right_strict_mono hp‚ÇÅ.two_le).injective t,
    exact ‚ü®rfl, rfl‚ü© },
  { intro n,
    simp only [nat.lt_add_one_iff, finset.mem_range, mem_sigma, finset.mem_Icc, mem_filter,
      one_div, exists_prop, sigma.exists, @von_mangoldt_ne_zero_iff n,
      is_prime_pow_nat_iff_bounded n, forall_exists_index, and_imp],
    rintro _ p hp‚ÇÅ k hk‚ÇÅ hp‚ÇÇ hk‚ÇÇ rfl,
    rw [nat.le_floor_iff' (pow_ne_zero _ hp‚ÇÇ.ne_zero), nat.cast_pow] at H,
    refine ‚ü®_, _, ‚ü®‚ü®hk‚ÇÇ, _‚ü©, _, hp‚ÇÇ‚ü©, _, rfl‚ü©,
    { have : 2 ^ k ‚â§ x,
      { refine le_trans (pow_le_pow_of_le_left zero_le_two _ _) H,
        exact_mod_cast hp‚ÇÇ.two_le },
      rwa [nat.le_floor_iff' hk‚ÇÇ.ne', le_logb_iff_rpow_le one_lt_two hx, rpow_nat_cast] },
    { rw nat.le_floor_iff' hp‚ÇÇ.ne_zero,
      refine le_trans _ (rpow_le_rpow (pow_nonneg (nat.cast_nonneg _) _) H
        (inv_nonneg.2 (nat.cast_nonneg _))),
      rw [‚Üêrpow_nat_cast, ‚Üêrpow_mul (nat.cast_nonneg _), mul_inv_cancel, rpow_one],
      rw nat.cast_ne_zero,
      apply hk‚ÇÇ.ne' },
    rw von_mangoldt_ne_zero_iff,
    apply prime.is_prime_pow,
    rwa ‚Üênat.prime_iff },
  { simp only [one_div, mem_sigma, finset.mem_Icc, mem_filter, finset.mem_range, ne.def, and_imp,
      sigma.forall],
    rintro k p hk - - - -,
    rw von_mangoldt_apply_pow,
    rwa ‚Üêpos_iff_ne_zero },
end

lemma finset.Icc_succ_left {a b : ‚Ñï} : finset.Icc a.succ b = Ioc a b :=
begin
  ext n,
  simp [nat.succ_le_iff],
end

lemma finset.Icc_eq_insert_Icc_succ {a b : ‚Ñï} (h : a ‚â§ b) : finset.Icc a b = insert a (Icc (a+1) b) :=
by rw [finset.Icc_succ_left, finset.Ioc_insert_left h]

-- Note this inequality can be improved, eg to
-- œà - œë << x ^ (1/2) * (log x)
-- but this is good enough for me!
lemma chebyshev_second_sub_chebyshev_first_eq {x : ‚Ñù} (hx : 2 ‚â§ x) :
  œà x - œë x ‚â§ x ^ (1 / 2 : ‚Ñù) * (log x)^2 :=
begin
  have h‚ÇÅ : ‚àë n in Icc 1 ‚åäx‚åã‚Çä, Œõ n = ‚àë n in filter is_prime_pow (Icc 1 ‚åäx‚åã‚Çä), Œõ n,
  { simp only [sum_filter_of_ne, div_ne_zero_iff, von_mangoldt_ne_zero_iff, implies_true_iff]
    { contextual := tt } },
  rw chebyshev_second_eq_sum_chebyshev_first (zero_le_two.trans hx),
  rw finset.Icc_eq_insert_Icc_succ,
  { rw [sum_insert, nat.cast_one, div_one, rpow_one, add_tsub_cancel_left],
    refine (sum_le_card_nsmul _ _ (1/2 * x^(1 / 2 : ‚Ñù) * log x) _).trans _,
    { intros k hk,
      simp only [finset.mem_Icc] at hk,
      have : x ^ (1 / k : ‚Ñù) ‚â§ x ^ (1 / 2 : ‚Ñù),
      { apply rpow_le_rpow_of_exponent_le (one_le_two.trans hx),
        refine one_div_le_one_div_of_le zero_lt_two _,
        exact_mod_cast hk.1 },
      apply (chebyshev_first_monotone this).trans _,
      refine (chebyshev_first_le_chebyshev_second (x ^ (1 / 2 : ‚Ñù))).trans _,
      apply (chebyshev_trivial_upper _).trans,
      { rw [log_rpow (zero_lt_two.trans_le hx), mul_left_comm, mul_assoc] },
      exact one_le_rpow (one_le_two.trans hx) (by norm_num) },
    { rw [nat.card_Icc, nat.succ_sub_succ_eq_sub, nsmul_eq_mul],
      suffices : ((‚åälogb 2 x‚åã‚Çä - 1 : ‚Ñï) : ‚Ñù) ‚â§ log x / real.log 2,
      { apply (mul_le_mul_of_nonneg_right this (mul_nonneg _ (log_nonneg _))).trans,
        { rw [mul_comm, mul_assoc, mul_div_assoc', mul_assoc, ‚Üêsq, mul_div_assoc', mul_div_assoc',
            mul_comm, mul_div_assoc],
          refine mul_le_of_le_one_right (mul_nonneg (rpow_nonneg_of_nonneg _ _) (sq_nonneg _)) _,
          { exact zero_le_two.trans hx },
          apply div_le_one_of_le;
          linarith [log_two_gt_d9] },
        { exact mul_nonneg (by norm_num1) (rpow_nonneg_of_nonneg (zero_le_two.trans hx) _) },
        { apply one_le_two.trans hx } },
      transitivity' ‚åälogb 2 x‚åã‚Çä,
      { rw nat.cast_le,
        exact nat.sub_le _ 1 },
      exact (nat.floor_le (logb_nonneg one_lt_two (one_le_two.trans hx))).trans le_rfl },
    simp },
  apply nat.le_floor,
  rwa [nat.cast_one, logb, one_le_div (log_pos one_lt_two), log_le_log zero_lt_two],
  linarith
end

@[simp] lemma nat.floor_two {R : Type*} [linear_ordered_semiring R] [floor_semiring R] :
  ‚åä(2 : R)‚åã‚Çä = 2 :=
by rw [‚Üênat.cast_two, nat.floor_coe]

lemma chebyshev_first_two : œë 2 = real.log 2 :=
begin
  rw [chebyshev_first, nat.floor_two],
  simp_rw [range_succ, filter_insert, if_neg nat.not_prime_zero, if_neg nat.not_prime_one,
    if_pos nat.prime_two, range_zero, filter_empty, insert_emptyc_eq, sum_singleton, nat.cast_two],
end

lemma chebyshev_first_trivial_lower : ‚àÄ x, 2 ‚â§ x ‚Üí 0.5 ‚â§ œë x :=
begin
  intros x hx,
  apply (chebyshev_first_monotone hx).trans',
  rw chebyshev_first_two,
  exact log_two_gt_d9.le.trans' (by norm_num),
end

lemma chebyshev_first_pos : ‚àÄ x, 2 ‚â§ x ‚Üí 0 < œë x :=
Œª x hx, lt_of_lt_of_le (by norm_num) (chebyshev_first_trivial_lower x hx)

lemma chebyshev_first_lower : is_O at_top id œë :=
begin
  have : is_O at_top (œà - œë) (Œª x, x ^ (1 / 2 : ‚Ñù) * (log x)^2),
  { apply is_O.of_bound 1,
    filter_upwards [eventually_ge_at_top (2 : ‚Ñù)],
    intros x hx,
    rw [pi.sub_apply, one_mul, norm_eq_abs, norm_eq_abs, abs_mul, abs_pow, pow_bit0_abs,
      abs_of_nonneg (sub_nonneg_of_le (chebyshev_first_le_chebyshev_second x)),
      abs_of_nonneg (rpow_nonneg_of_nonneg (zero_le_two.trans hx) _)],
    apply chebyshev_second_sub_chebyshev_first_eq hx },
  have : is_o at_top (œà - œë) id,
  { refine this.trans_is_o _,
    have t := (is_o_log_rpow_at_top (show (0 : ‚Ñù) < 1 / 4, by norm_num1)).pow zero_lt_two,
    refine (is_O.mul_is_o _ t).congr' eventually_eq.rfl _,
    { exact (Œª x, x ^ (1 / 2 : ‚Ñù)) },
    { exact is_O_refl _ _ },
    { filter_upwards [eventually_gt_at_top (0 : ‚Ñù)] with x hx,
      rw [‚Üêrpow_nat_cast, ‚Üêrpow_mul hx.le, ‚Üêrpow_add hx],
      norm_num } },
  have := this.symm.trans_is_O chebyshev_lower,
  apply (chebyshev_lower.trans (is_o.right_is_O_add this)).congr_right _,
  simp
end

lemma chebyshev_first_all : ‚àÉ c, 0 < c ‚àß ‚àÄ x, 2 ‚â§ x ‚Üí c * ‚à•x‚à• ‚â§ ‚à•œë x‚à• :=
begin
  obtain ‚ü®c‚ÇÄ, hc‚ÇÄ, h‚ü© := chebyshev_first_lower.exists_pos,
  obtain ‚ü®X, hX‚ü© := eventually_at_top.1 h.bound,
  let c := max c‚ÇÄ (2 * X),
  have hc : 0 < c := lt_max_of_lt_left hc‚ÇÄ,
  refine ‚ü®c‚Åª¬π, inv_pos.2 hc, Œª x hx, _‚ü©,
  rw [inv_mul_le_iff hc],
  cases le_total X x with hx' hx',
  { exact (hX _ hx').trans (mul_le_mul_of_nonneg_right (le_max_left _ _) (norm_nonneg _)) },
  rw [norm_of_nonneg (chebyshev_first_nonneg _), norm_of_nonneg (zero_le_two.trans hx)],
  refine hx'.trans (eq.trans_le _ (mul_le_mul (le_max_right _ _)
    (chebyshev_first_trivial_lower _ hx) (by norm_num) hc.le)),
  ring
end

lemma is_O_div_log_prime_counting :
  is_O at_top (Œª x, x / log x) (Œª x, (œÄ ‚åäx‚åã‚Çä : ‚Ñù)) :=
begin
  have : is_O at_top œë (Œª x, (œÄ ‚åäx‚åã‚Çä : ‚Ñù) * real.log x),
  { apply is_O_of_le _ _,
    intro x,
    rw [norm_of_nonneg (chebyshev_first_nonneg x), norm_eq_abs],
    exact (chebyshev_first_trivial_bound _).trans (le_abs_self _) },
  apply ((chebyshev_first_lower.trans this).mul (is_O_refl (Œª x, (log x)‚Åª¬π) _)).congr' _ _,
  { apply eventually_of_forall,
    intro x,
    simp only [id.def, div_eq_mul_inv] },
  { filter_upwards [eventually_gt_at_top (1 : ‚Ñù)] with x hx,
    rw mul_inv_cancel_right‚ÇÄ (log_pos hx).ne' }
end

-- lemma prime_counting_asymptotic :
--   is_O (Œª x, prime_summatory (Œª _, (1 : ‚Ñù)) 1 x - œà x / log x)
--     (Œª x, x / (log x)^2) at_top :=
-- sorry

def prime_log_div_sum_error (x : ‚Ñù) : ‚Ñù := prime_summatory (Œª p, real.log p * p‚Åª¬π) 1 x - log x

lemma prime_summatory_log_mul_inv_eq :
  prime_summatory (Œª p, real.log p * p‚Åª¬π) 2 = log + prime_log_div_sum_error :=
begin
  ext x,
  rw [pi.add_apply, prime_log_div_sum_error, add_sub_cancel'_right,
    prime_summatory_one_eq_prime_summatory_two]
end

lemma is_O_prime_log_div_sum_error : is_O at_top prime_log_div_sum_error (Œª _, (1 : ‚Ñù)) :=
log_reciprocal

@[measurability] lemma measurable_prime_log_div_sum_error :
  measurable prime_log_div_sum_error :=
begin
  change measurable (Œª x, _),
  simp only [prime_summatory_one_eq_prime_summatory_two, prime_summatory_eq_summatory],
  measurability
end

def prime_reciprocal_integral : ‚Ñù :=
  ‚à´ x in Ioi 2, prime_log_div_sum_error x * (x * log x ^ 2)‚Åª¬π.

lemma my_func_continuous_on : continuous_on (Œª x, (x * log x ^ 2)‚Åª¬π) (Ioi 1) :=
begin
  refine (continuous_on_id.mul ((continuous_on_log.mono _).pow _)).inv‚ÇÄ _,
  { simp [imp_not_comm, set.subset_def] },
  rintro x (hx : _ < _),
  exact mul_ne_zero (show x ‚â† 0, by linarith) (pow_ne_zero _ (log_pos hx).ne'),
end

lemma integral_inv_self_mul_log_sq {a b : ‚Ñù} (ha : 1 < a) (hb : 1 < b) :
  ‚à´ x in a..b, (x * log x ^ 2)‚Åª¬π = (log a)‚Åª¬π - (log b)‚Åª¬π :=
begin
  have : (‚àÄ y ‚àà interval a b, has_deriv_at (Œª x, - (log x)‚Åª¬π) (y * log y ^ 2)‚Åª¬π y),
  { intros y hy,
    have : (y * log y ^ 2)‚Åª¬π = - ((- y‚Åª¬π) / (log y) ^ 2),
    { rw [neg_div, neg_neg, div_eq_mul_inv, mul_inv] },
    rw this,
    have : 1 < y := (lt_min_iff.2 ‚ü®ha, hb‚ü©).trans_le hy.1,
    exact ((has_deriv_at_log (by linarith)).inv (log_pos this).ne').neg },
  rw [interval_integral.integral_eq_sub_of_has_deriv_at this, neg_sub_neg],
  apply continuous_on.interval_integrable,
  apply my_func_continuous_on.mono,
  intros y hy,
  exact (lt_min_iff.2 ‚ü®ha, hb‚ü©).trans_le hy.1,
end

lemma integral_Ioi_my_func_tendsto_aux {a : ‚Ñù} (ha : 1 < a)
  {Œπ : Type*} {b : Œπ ‚Üí ‚Ñù} {l : filter Œπ} (hb : tendsto b l at_top) :
  tendsto (Œª i, ‚à´ x in a..b i, (x * log x ^ 2)‚Åª¬π) l (ùìù (log a)‚Åª¬π) :=
begin
  suffices :
    tendsto (Œª i, ‚à´ x in a..b i, (x * log x ^ 2)‚Åª¬π) l (nhds ((log a)‚Åª¬π - 0)),
  { simpa using this },
  have : ‚àÄ·∂† i in l, ‚à´ x in a..b i, (x * log x ^ 2)‚Åª¬π = (log a)‚Åª¬π - (log (b i))‚Åª¬π,
  { filter_upwards [hb.eventually (eventually_ge_at_top a)],
    intros i hi,
    rw integral_inv_self_mul_log_sq ha (ha.trans_le hi) },
  rw tendsto_congr' this,
  exact (tendsto_inv_at_top_zero.comp (tendsto_log_at_top.comp hb)).const_sub _,
end

-- TODO: Move to mathlib
lemma integrable_on_my_func_Ioi {a : ‚Ñù} (ha : 1 < a) :
  integrable_on (Œª x, (x * log x ^ 2)‚Åª¬π) (Ioi a) :=
begin
  have hb : tendsto (Œª (x : ‚Ñù‚â•0), a + x) at_top at_top :=
    tendsto_at_top_add_const_left _ _ (nnreal.tendsto_coe_at_top.2 tendsto_id),
  refine integrable_on_Ioi_of_interval_integral_norm_tendsto (log a)‚Åª¬π a _ hb _,
  { intros i,
    refine (continuous_on.integrable_on_Icc _).mono_set set.Ioc_subset_Icc_self,
    apply my_func_continuous_on.mono,
    rintro y ‚ü®hy, -‚ü©,
    exact ha.trans_le hy },
  apply (integral_Ioi_my_func_tendsto_aux ha hb).congr (Œª x, _),
  refine interval_integral.integral_congr (Œª i hi, _),
  apply (real.norm_of_nonneg _).symm,
  refine inv_nonneg.2 (mul_nonneg _ (sq_nonneg _)),
  refine le_trans _ hi.1,
  exact le_min (by linarith) (add_nonneg (by linarith) x.2),
end

-- TODO: Move to mathlib
lemma integral_my_func_Ioi {a : ‚Ñù} (ha : 1 < a) :
  ‚à´ x in Ioi a, (x * log x ^ 2)‚Åª¬π = (log a)‚Åª¬π :=
tendsto_nhds_unique
  (interval_integral_tendsto_integral_Ioi _ (integrable_on_my_func_Ioi ha) tendsto_id)
  (integral_Ioi_my_func_tendsto_aux ha tendsto_id)

lemma my_func2_continuous_on : continuous_on (Œª x, (x * log x)‚Åª¬π) (Ioi 1) :=
begin
  refine (continuous_on_id.mul (continuous_on_log.mono _)).inv‚ÇÄ _,
  { simp [imp_not_comm, set.subset_def] },
  rintro x (hx : _ < _),
  exact mul_ne_zero (show x ‚â† 0, by linarith) (log_pos hx).ne',
end

lemma integral_inv_self_mul_log {a b : ‚Ñù} (ha : 1 < a) (hb : 1 < b) :
  ‚à´ x in a..b, (x * log x)‚Åª¬π = log (log b) - log (log a) :=
begin
  have : (‚àÄ y ‚àà interval a b, has_deriv_at (Œª x, log (log x)) (y * log y)‚Åª¬π y),
  { intros y hy,
    rw [mul_inv, ‚Üêdiv_eq_mul_inv],
    have : 1 < y := (lt_min_iff.2 ‚ü®ha, hb‚ü©).trans_le hy.1,
    exact (has_deriv_at_log (by linarith)).log (log_pos this).ne' },
  rw [interval_integral.integral_eq_sub_of_has_deriv_at this],
  apply continuous_on.interval_integrable,
  apply my_func2_continuous_on.mono,
  intros y hy,
  exact (lt_min_iff.2 ‚ü®ha, hb‚ü©).trans_le hy.1,
end

lemma integrable_on_prime_log_div_sum_error :
  integrable_on (Œª x, prime_log_div_sum_error x * (x * log x ^ 2)‚Åª¬π) (Ici 2) :=
begin
  obtain ‚ü®c, hc‚ü© := is_O_prime_log_div_sum_error.bound,
  obtain ‚ü®k, hk‚ÇÇ, hk : ‚àÄ y, k ‚â§ y ‚Üí _ ‚â§ c * ‚à•(1 : ‚Ñù)‚à•‚ü© := (at_top_basis' 2).mem_iff.1 hc,
  have : set.Ici 2 = set.Ico 2 k ‚à™ set.Ici k,
  { rw Ico_union_Ici_eq_Ici hk‚ÇÇ },
  rw this,
  have hlog : continuous_on log (Icc 2 k),
  { apply continuous_on_log.mono _,
    rintro y ‚ü®hy, -‚ü© (rfl : y = 0),
    norm_num at hy },
  have hlog' : continuous_on (Œª (i : ‚Ñù), (i * log i ^ 2)‚Åª¬π) (Icc 2 k),
  { apply continuous_on.inv‚ÇÄ,
    { exact continuous_on_id.mul (continuous_on.pow hlog 2) },
    rintro y ‚ü®hy, -‚ü©,
    exact mul_ne_zero (by linarith) (pow_ne_zero _ (log_pos (by linarith)).ne') },
  apply integrable_on.union,
  { refine integrable_on.congr_set_ae _ Ico_ae_eq_Icc,
    simp only [prime_log_div_sum_error, prime_summatory_one_eq_prime_summatory_two,
      prime_summatory_eq_summatory, sub_mul],
    apply integrable.sub,
    { exact partial_summation_integrable _ (continuous_on.integrable_on_Icc hlog') },
    refine continuous_on.integrable_on_Icc _,
    exact hlog.mul hlog' },
  have : ‚àÄ·µê (x : ‚Ñù) ‚àÇvolume.restrict (Ici k),
    ‚à•prime_log_div_sum_error x * (x * log x ^ 2)‚Åª¬π‚à• ‚â§ ‚à•c * (x * log x ^ 2)‚Åª¬π‚à•,
  { rw ae_restrict_iff' (@measurable_set_Ici ‚Ñù _ _ _ _ _ _),
    filter_upwards with x hx,
    rw [norm_mul, norm_mul],
    apply mul_le_mul_of_nonneg_right _ (norm_nonneg _),
    apply le_trans (hk _ hx) _,
    simp [norm_eq_abs, le_abs_self] },
  refine integrable.mono _ (measurable.ae_strongly_measurable (by measurability)) this,
  apply integrable.const_mul,
  refine integrable_on.congr_set_ae _ Ioi_ae_eq_Ici.symm,
  apply integrable_on_my_func_Ioi,
  linarith
end

lemma prime_reciprocal_eq {x : ‚Ñù} (hx : 2 ‚â§ x) :
  prime_summatory (Œª p, (p : ‚Ñù)‚Åª¬π) 2 x -
    (log (log x) + (1 - log (real.log 2) + prime_reciprocal_integral))
    = prime_log_div_sum_error x / log x -
      ‚à´ t in Ici x, prime_log_div_sum_error t / (t * log t ^ 2) :=
begin
  let a : ‚Ñï ‚Üí ‚Ñù := Œª n, if n.prime then real.log n * n‚Åª¬π else 0,
  let f : ‚Ñù ‚Üí ‚Ñù := Œª x, (log x)‚Åª¬π,
  let f' : ‚Ñù ‚Üí ‚Ñù := Œª x, ((- x‚Åª¬π) / log x ^ 2),
  have hdiff : ‚àÄ i ‚àà set.Ici ((2 : ‚Ñï) : ‚Ñù), has_deriv_at f (f' i) i,
  { rintro i (hi : _ ‚â§ _),
    rw nat.cast_two at hi,
    exact (has_deriv_at_log (by linarith)).inv (ne_of_gt (log_pos (by linarith))) },
  have h : ‚àÄ x : ‚Ñù, x ‚àà set.Ici (2 : ‚Ñù) ‚Üí x ‚â† 0,
  { simp only [imp_not_comm, set.mem_Ici, not_le, forall_eq, zero_lt_bit0, zero_lt_one] },
  -- have h' : ‚àÄ x : ‚Ñù, x ‚àà set.Ici ((2 : ‚Ñï) : ‚Ñù) ‚Üí x ‚â† 0 := by exact_mod_cast h,
  have hcont : continuous_on f' (Ici ((2 : ‚Ñï) : ‚Ñù)),
  { rw nat.cast_two,
    apply continuous_on.div,
    { exact (continuous_on_inv‚ÇÄ.mono h).neg },
    { exact (continuous_on_log.mono h).pow _ },
    intros x hx,
    refine pow_ne_zero _ (log_pos _).ne',
    exact one_lt_two.trans_le hx },
  have := partial_summation_cont' a f f' two_ne_zero hdiff hcont x,
  rw [sub_eq_iff_eq_add],
  convert this using 1,
  { rw prime_summatory_eq_summatory,
    refine finset.sum_congr rfl _,
    intros y hy,
    simp only [],
    rw [ite_mul, zero_mul, mul_right_comm, mul_inv_cancel, one_mul],
    apply (log_pos _).ne',
    rw [nat.one_lt_cast, ‚Üênat.succ_le_iff],
    simp only [finset.mem_Icc] at hy,
    apply hy.1 },
  rw [‚Üêprime_summatory_eq_summatory, prime_summatory_log_mul_inv_eq, nat.cast_two],
  simp only [div_eq_mul_inv, pi.add_apply, add_mul, f', f, neg_mul, mul_neg,
    integral_neg, sub_neg_eq_add, ‚Üêmul_inv],
  have h‚ÇÅ : integrable (Œª a, (a * log a)‚Åª¬π) (volume.restrict (Icc 2 x)),
  { apply continuous_on.integrable_on_Icc,
    apply my_func2_continuous_on.mono,
    intros y hy,
    exact one_lt_two.trans_le hy.1 },
  have :
    ‚à´ a in Icc 2 x, real.log a * (a * real.log a ^ 2)‚Åª¬π +
        prime_log_div_sum_error a * (a * log a ^ 2)‚Åª¬π =
    ‚à´ a in Icc 2 x, (a * real.log a)‚Åª¬π + prime_log_div_sum_error a * (a * log a ^ 2)‚Åª¬π,
  { refine set_integral_congr measurable_set_Icc (Œª y hy, _),
    dsimp,
    rw [mul_inv, mul_inv, mul_left_comm, ‚Üêdiv_eq_mul_inv, sq, div_self_mul_self'] },
  rw [mul_inv_cancel (log_pos (one_lt_two.trans_le hx)).ne', this,
    integral_add h‚ÇÅ (integrable_on_prime_log_div_sum_error.mono_set Icc_subset_Ici_self),
    sub_add_eq_add_sub, add_comm (1 : ‚Ñù), add_sub_assoc, add_assoc, add_right_inj,
    integral_Icc_eq_integral_Ioc, ‚Üêinterval_integral.integral_of_le hx, ‚Üêadd_assoc,
    ‚Üêadd_assoc (1 : ‚Ñù), add_sub, integral_inv_self_mul_log one_lt_two (one_lt_two.trans_le hx),
    add_comm (real.log _), add_sub, add_sub_assoc, add_right_inj, sub_eq_iff_eq_add,
    integral_Icc_eq_integral_Ioc, set_integral_congr_set_ae (Ioi_ae_eq_Ici' volume_singleton).symm,
    ‚Üêintegral_union _ _ (integrable_on_prime_log_div_sum_error.mono_set _)
    (integrable_on_prime_log_div_sum_error.mono_set _),
    Ioc_union_Ioi_eq_Ioi hx],
  { refl },
  { exact disjoint.mono_left set.Ioc_subset_Iic_self (Iic_disjoint_Ioi le_rfl) },
  { exact measurable_set_Ioi },
  { exact set.Ioc_subset_Icc_self.trans set.Icc_subset_Ici_self },
  { rintro y (hy : _ < _),
    apply hx.trans hy.le },
end

lemma prime_reciprocal_error :
  is_O at_top (Œª x, prime_log_div_sum_error x / log x -
      ‚à´ t in Ici x, prime_log_div_sum_error t / (t * log t ^ 2)) (Œª x, (log x)‚Åª¬π) :=
begin
  simp only [div_eq_mul_inv],
  apply is_O.sub,
  { apply (is_O_prime_log_div_sum_error.mul (is_O_refl _ _)).trans _,
    simpa using is_O_refl _ _ },
  obtain ‚ü®c, hc‚ü© := is_O_prime_log_div_sum_error.bound,
  obtain ‚ü®k, hk‚ÇÇ, hk : ‚àÄ y, k ‚â§ y ‚Üí _ ‚â§ c * ‚à•(1 : ‚Ñù)‚à•‚ü© := (at_top_basis' 2).mem_iff.1 hc,
  have : ‚àÄ y, k ‚â§ y ‚Üí ‚àÄ·µê (x : ‚Ñù) ‚àÇvolume.restrict (Ici y),
    ‚à•prime_log_div_sum_error x * (x * log x ^ 2)‚Åª¬π‚à• ‚â§ c * (x * log x ^ 2)‚Åª¬π,
  { intros y hy,
    rw ae_restrict_iff' (@measurable_set_Ici ‚Ñù _ _ _ _ _ _),
    filter_upwards with x hx,
    rw [norm_mul],
    apply (mul_le_mul_of_nonneg_right (hk _ (hy.trans hx)) (norm_nonneg _)).trans _,
    rw [norm_eq_abs, abs_one, mul_one, norm_eq_abs, abs_inv, abs_mul, abs_sq, abs_of_nonneg],
    exact zero_le_two.trans (hk‚ÇÇ.trans (hy.trans hx)) },
  have : is_O at_top (Œª y, ‚à´ x in Ici y, prime_log_div_sum_error x * (x * log x ^ 2)‚Åª¬π)
          (Œª y, ‚à´ x in Ici y, c * (x * log x ^ 2)‚Åª¬π),
  { apply is_O.of_bound 1,
    filter_upwards [eventually_ge_at_top k] with y hy,
    apply (norm_integral_le_integral_norm _).trans _,
    rw [norm_eq_abs, one_mul],
    apply le_trans _ (le_abs_self _),
    refine integral_mono_of_nonneg (eventually_of_forall (Œª x, norm_nonneg _)) _ (this _ hy),
    refine integrable.const_mul _ _,
    refine integrable_on.congr_set_ae _ Ioi_ae_eq_Ici.symm,
    exact integrable_on_my_func_Ioi (one_lt_two.trans_le (hk‚ÇÇ.trans hy)) },
  apply this.trans,
  simp only [‚Üêsmul_eq_mul, integral_smul],
  simp only [smul_eq_mul],
  apply (is_O_const_mul_self c _ _).trans _,
  apply is_O.of_bound 1,
  filter_upwards [eventually_gt_at_top (1 : ‚Ñù)] with y hy,
  rw [set_integral_congr_set_ae (Ioi_ae_eq_Ici' volume_singleton).symm, integral_my_func_Ioi hy,
    one_mul],
end

def meissel_mertens := 1 - log (real.log 2) + prime_reciprocal_integral

lemma prime_reciprocal :
  is_O at_top (Œª x, prime_summatory (Œª p, (p : ‚Ñù)‚Åª¬π) 1 x - (log (log x) + meissel_mertens))
    (Œª x, (log x)‚Åª¬π) :=
begin
  apply prime_reciprocal_error.congr' _ eventually_eq.rfl,
  filter_upwards [eventually_ge_at_top (2 : ‚Ñù)] with x hx,
  rw [prime_summatory_one_eq_prime_summatory_two, ‚Üêprime_reciprocal_eq hx],
  refl
end

lemma is_o_log_inv_one {c : ‚Ñù} (hc : c ‚â† 0) : is_o at_top (Œª x : ‚Ñù, (log x)‚Åª¬π) (Œª x, (c : ‚Ñù)) :=
(is_o.inv_rev (is_o_one_log c‚Åª¬π) (by simp [hc])).congr_right (by simp)

lemma is_o_const_log_log (c : ‚Ñù) : is_o at_top (Œª x : ‚Ñù, (c : ‚Ñù)) (Œª x : ‚Ñù, log (log x)) :=
is_o_const_of_tendsto_at_top _ _ (tendsto_log_at_top.comp tendsto_log_at_top) _

lemma prime_reciprocal_upper :
  is_O at_top (Œª x, prime_summatory (Œª p, (p : ‚Ñù)‚Åª¬π) 1 x) (Œª x, log (log x)) :=
((prime_reciprocal.trans ((is_o_log_inv_one one_ne_zero).trans (is_o_const_log_log _)).is_O).add
  ((is_O_refl _ _).add_is_o (is_o_const_log_log _))).congr (Œª x, sub_add_cancel _ _) (Œª _, rfl)

lemma mul_add_one_inv (x : ‚Ñù) (hx‚ÇÄ : x ‚â† 0) (hx‚ÇÅ : x + 1 ‚â† 0) :
  (x * (x + 1))‚Åª¬π = x‚Åª¬π - (x + 1)‚Åª¬π :=
by field_simp [hx‚ÇÄ, hx‚ÇÅ]

lemma sum_thing_has_sum (k : ‚Ñï) : has_sum (Œª n : ‚Ñï, ((n + k + 1) * (n + k + 2) : ‚Ñù)‚Åª¬π) (k + 1)‚Åª¬π :=
begin
  refine (has_sum_iff_tendsto_nat_of_nonneg _ _).2 _,
  { exact Œª i, inv_nonneg.2 (by exact_mod_cast zero_le') },
  have : ‚àÄ i : ‚Ñï, ((i + k + 1 : ‚Ñù) * (i + k + 2))‚Åª¬π = (‚Üë(i + (k + 1)))‚Åª¬π - (‚Üë(i + 1 + (k + 1)))‚Åª¬π,
  { intro i,
    simp only [nat.cast_add_one, nat.cast_add _ (_ + _), add_right_comm (i : ‚Ñù) 1,
      ‚Üêadd_assoc (i : ‚Ñù)],
    convert mul_add_one_inv (i + k + 1) _ _ using 2,
    { norm_num [add_assoc] },
    { exact_mod_cast nat.succ_ne_zero (i + k) },
    { exact_mod_cast nat.succ_ne_zero (i + k + 1) } },
  simp only [this, sum_range_sub', zero_add, nat.cast_add_one],
  simpa using (tendsto_inverse_at_top_nhds_0_nat.comp (tendsto_add_at_top_nat (k + 1))).const_sub
    (k + 1 : ‚Ñù)‚Åª¬π,
end

lemma sum_thing'_has_sum : has_sum (Œª n : ‚Ñï, ((n - 1) * n : ‚Ñù)‚Åª¬π) 1 :=
begin
  refine (has_sum_nat_add_iff' 2).1 _,
  convert sum_thing_has_sum 0,
  { norm_num [add_sub_assoc] },
  simp [sum_range_succ],
end

lemma sum_thing'''_has_sum {k : ‚Ñï} (hk : 1 ‚â§ k) :
  has_sum (Œª n : ‚Ñï, ((n + k) * (n + k + 1) : ‚Ñù)‚Åª¬π) k‚Åª¬π :=
begin
  convert sum_thing_has_sum (k - 1),
  { ext n,
    rw [add_assoc, add_assoc, nat.cast_sub hk, nat.cast_one, sub_add_cancel, add_sub, sub_add],
    norm_num [add_assoc] },
  simp [hk]
end

lemma sum_thing''_indicator_has_sum {k : ‚Ñï} (hk : 1 ‚â§ k) :
  has_sum ({n | k < n}.indicator (Œª n, ((n - 1) * n : ‚Ñù)‚Åª¬π)) k‚Åª¬π :=
begin
  have : set.range (Œª i, i + (k + 1)) = {n | k < n},
  { ext i,
    simp only [set.mem_range, mem_set_of_eq, ‚Üênat.add_one_le_iff, le_iff_exists_add,
      add_comm (k + 1), eq_comm] },
  rw ‚Üêthis,
  have : function.injective (Œª i, i + (k + 1)) := add_left_injective (k + 1),
  apply (function.injective.has_sum_iff this _).1,
  { convert sum_thing'''_has_sum hk using 1,
    ext n,
    simp [‚Üêadd_assoc, set.indicator_of_mem] },
  simp [set.indicator_apply, if_false] {contextual := tt},
end

lemma prime_sum_thing_summable' (s : set ‚Ñï) :
  summable (s.indicator ((set_of nat.prime).indicator (Œª n, ((n - 1) * n : ‚Ñù)‚Åª¬π))) :=
(sum_thing'_has_sum.summable.indicator _).indicator _

lemma indicator_mono {Œ± Œ≤ : Type*} [ordered_add_comm_monoid Œ≤] {s t : set Œ±} {f : Œ± ‚Üí Œ≤} (h : s ‚äÜ t)
  (hf : ‚àÄ x, x ‚àâ s ‚Üí x ‚àà t ‚Üí 0 ‚â§ f x) :
  indicator s f ‚â§ indicator t f :=
begin
  classical,
  intros x,
  simp only [set.indicator_apply],
  split_ifs,
  { refl },
  { cases h_2 (h h_1) },
  { apply hf _ h_1 h_2 },
  { refl },
end

lemma prime_sum_thing {k : ‚Ñï} (hk : 1 ‚â§ k) :
  tsum ({n | k < n}.indicator ((set_of nat.prime).indicator (Œª n, ((n - 1) * n : ‚Ñù)‚Åª¬π))) ‚â§ k‚Åª¬π :=
begin
  refine has_sum_mono ((prime_sum_thing_summable' _).has_sum) (sum_thing''_indicator_has_sum hk) _,
  rw [indicator_indicator, set.inter_comm, ‚Üêindicator_indicator],
  refine indicator_le_self' (Œª _ _, indicator_nonneg (Œª n (hn : _ < _), _) _),
  simp [inv_nonneg, hk.trans hn.le, mul_nonneg],
end

lemma my_mul_thing : ‚àÄ {n : ‚Ñï}, (0 : ‚Ñù) ‚â§ (n - 1) * n
| 0 := by simp
| (n+1) := mul_nonneg (by simp) (nat.cast_nonneg _)

lemma my_mul_thing' : ‚àÄ {n : ‚Ñï}, (0 : ‚Ñù) ‚â§ ((n - 1) * n)‚Åª¬π := Œª n, inv_nonneg.2 my_mul_thing

lemma is_O_partial_of_bound {f : ‚Ñï ‚Üí ‚Ñù} (hf : ‚àÄ n, f n ‚â§ ((n - 1) * n)‚Åª¬π) (hf' : ‚àÄ n, 0 ‚â§ f n) :
  ‚àÉ c, is_O at_top (Œª x : ‚Ñù, ‚àë i in range (‚åäx‚åã‚Çä + 1), f i - c) (Œª x, x‚Åª¬π) :=
begin
  have hf'' : summable f := summable_of_nonneg_of_le hf' hf sum_thing'_has_sum.summable,
  refine ‚ü®tsum f, (is_O.of_bound 2 _).symm‚ü©,
  filter_upwards [eventually_ge_at_top (1 : ‚Ñù)] with x hx,
  have hx' : 1 ‚â§ ‚åäx‚åã‚Çä := by rwa [nat.le_floor_iff' one_ne_zero, nat.cast_one],
  have hx'' : (1 : ‚Ñù) ‚â§ ‚åäx‚åã‚Çä := by simpa,
  rw [‚Üêsum_add_tsum_nat_add _ hf'', add_tsub_cancel_left, norm_inv,
    norm_of_nonneg (tsum_nonneg (Œª i, hf' (i + _))), norm_of_nonneg (zero_le_one.trans hx)],
  transitivity (‚åäx‚åã‚Çä : ‚Ñù)‚Åª¬π,
  { refine has_sum_le (Œª n, _) ((summable_nat_add_iff _).2 hf'').has_sum (sum_thing'''_has_sum hx'),
    refine (hf _).trans _,
    rw [nat.cast_add, nat.cast_add_one, ‚Üêadd_assoc, add_sub_cancel] },
  rw [‚Üêdiv_eq_mul_inv, le_div_iff' (zero_lt_one.trans_le hx), ‚Üêdiv_eq_mul_inv,
    div_le_iff (zero_lt_one.trans_le hx'')],
  linarith [nat.lt_floor_add_one x],
end

lemma is_O_partial_of_bound' {f : ‚Ñï ‚Üí ‚Ñù} (hf : ‚àÄ n, f n ‚â§ ((n - 1) * n)‚Åª¬π) (hf' : ‚àÄ n, 0 ‚â§ f n) :
  ‚àÉ c, is_O at_top (Œª x : ‚Ñù, ‚àë i in Icc 1 ‚åäx‚åã‚Çä, f i - c) (Œª x, x‚Åª¬π) :=
begin
  obtain ‚ü®c, hc‚ü© := is_O_partial_of_bound hf hf',
  refine ‚ü®c, hc.congr_left (Œª x, eq.symm _)‚ü©,
  rw [range_eq_Ico, sum_subset, nat.Ico_succ_right],
  { exact Icc_subset_Icc_left zero_le_one },
  simp only [finset.mem_Icc, zero_le', true_and, and_true, not_le, nat.lt_one_iff]
    {contextual := tt},
  intros _ _ _,
  exact (hf' 0).antisymm' (by simpa using hf 0),
end

lemma intermediate_bound :
  ‚àÉ c, is_O at_top (Œª x, prime_summatory (Œª p, ((p - 1) * p : ‚Ñù)‚Åª¬π) 1 x - c) (Œª x, x‚Åª¬π) :=
begin
  simp only [prime_summatory, sum_filter],
  refine is_O_partial_of_bound' (Œª n, _) (Œª n, _);
  split_ifs;
  exact my_mul_thing' <|> refl
end

lemma prime_proper_powers {x : ‚Ñù} {f : ‚Ñï ‚Üí ‚Ñù} :
  (‚àë q in (finset.Icc 1 ‚åäx‚åã‚Çä).filter is_prime_pow, f q) - prime_summatory f 1 x =
    ‚àë p in (finset.Icc 1 ‚åäx‚åã‚Çä).filter nat.prime,
      ‚àë k in (finset.Icc 2 ‚åälog x / real.log p‚åã‚Çä), f (p ^ k) :=
begin
  rw [exact_sum_prime_powers, prime_summatory, sub_eq_iff_eq_add, ‚Üêsum_add_distrib],
  refine finset.sum_congr rfl (Œª p hp, _),
  rw [mem_filter, finset.mem_Icc] at hp,
  have : 0 < p := hp.1.1,
  rw [nat.le_floor_iff' this.ne'] at hp,
  have : (0 : ‚Ñù) < p := by exact_mod_cast this,
  have : 1 ‚â§ ‚åälog x / real.log p‚åã‚Çä,
  { rw [nat.le_floor_iff' one_ne_zero, nat.cast_one, one_le_div, log_le_log ‚Äπ_‚Ä∫
      (this.trans_le hp.1.2)],
    { exact hp.1.2 },
    apply log_pos,
    exact_mod_cast hp.2.one_lt },
  rw [finset.Icc_eq_insert_Icc_succ this, sum_insert, pow_one, add_comm],
  rw [finset.mem_Icc],
  norm_num,
end

lemma is_O_reciprocal_difference_aux {x : ‚Ñù} :
  |(‚àë q in (finset.Icc 1 ‚åäx‚åã‚Çä).filter is_prime_pow, (q : ‚Ñù)‚Åª¬π) -
    prime_summatory (Œª p, p‚Åª¬π) 1 x - prime_summatory (Œª p, (((p - 1) * p : ‚Ñù)‚Åª¬π)) 1 x| ‚â§
      ‚àë p in (finset.Icc 1 ‚åäx‚åã‚Çä).filter nat.prime, (2 * x‚Åª¬π) :=
begin
  rw [prime_proper_powers, prime_summatory, ‚Üêsum_sub_distrib],
  refine (abs_sum_le_sum_abs _ _).trans (sum_le_sum (Œª p hp, _)),
  rw [mem_filter, finset.mem_Icc] at hp,
  have : 0 < p := hp.1.1,
  rw [nat.le_floor_iff' this.ne'] at hp,
  have hp‚ÇÄ : (0 : ‚Ñù) < p := by exact_mod_cast this,
  have hp‚ÇÅ : (1 : ‚Ñù) < (p : ‚Ñù) := by simpa using hp.2.one_lt,
  have hx : 0 < x := hp‚ÇÄ.trans_le hp.1.2,
  have hf : 1 ‚â§ ‚åälog x / real.log p‚åã‚Çä,
  { rw [nat.le_floor_iff' one_ne_zero, nat.cast_one, one_le_div, log_le_log ‚Äπ_‚Ä∫ hx],
    { exact hp.1.2 },
    apply log_pos,
    exact_mod_cast hp.2.one_lt },
  simp only [‚Üênat.Ico_succ_right, nat.cast_pow, ‚Üêinv_pow],
  rw [geom_sum_Ico', inv_pow, inv_pow, ‚Üêone_div (p : ‚Ñù), one_sub_div hp‚ÇÄ.ne', div_div_eq_mul_div,
    sq, pow_succ', mul_inv, mul_inv, ‚Üêsub_mul, inv_mul_cancel_right‚ÇÄ hp‚ÇÄ.ne', sub_div,
    div_eq_mul_inv, mul_inv, mul_comm, sub_sub_cancel_left, abs_neg, abs_div, abs_inv, abs_pow,
    abs_of_nonneg (sub_nonneg_of_le hp‚ÇÅ.le), nat.abs_cast, div_le_iff (sub_pos_of_lt hp‚ÇÅ)],
  rotate 1,
  { simpa only [ne.def, inv_eq_one] using hp‚ÇÅ.ne' },
  { rwa nat.succ_le_succ_iff },
  transitivity x‚Åª¬π * p,
  { rw [mul_comm, ‚Üêdiv_eq_mul_inv, le_div_iff' hx, ‚Üêdiv_eq_mul_inv, div_le_iff, ‚Üêpow_succ,
      ‚Üêrpow_nat_cast, ‚Üêlogb_le_iff_le_rpow hp‚ÇÅ hx, log_div_log],
    { exact (nat.lt_floor_add_one _).le },
    { exact pow_pos hp‚ÇÄ _, } },
  rw [mul_comm (2 : ‚Ñù), mul_assoc],
  refine mul_le_mul_of_nonneg_left _ _,
  { norm_cast,
    linarith [hp.2.two_le] },
  exact inv_nonneg.2 hx.le,
end

lemma is_O_reciprocal_difference : ‚àÉ c,
  is_O at_top (Œª x : ‚Ñù, (‚àë q in (finset.Icc 1 ‚åäx‚åã‚Çä).filter is_prime_pow, (q : ‚Ñù)‚Åª¬π) -
          prime_summatory (Œª p, p‚Åª¬π) 1 x - c)
    (Œª x, (log x)‚Åª¬π) :=
begin
  obtain ‚ü®c, hc‚ü© := intermediate_bound,
  refine ‚ü®c, _‚ü©,
  have hc' : is_O at_top (Œª x, prime_summatory (Œª p, ((p - 1) * p : ‚Ñù)‚Åª¬π) 1 x - c) (Œª x, (log x)‚Åª¬π),
  { refine hc.trans (is_o_log_id_at_top.is_O.inv_rev _),
    filter_upwards [eventually_gt_at_top (1 : ‚Ñù)] with x hx i using ((log_pos hx).ne' i).elim },
  refine is_O.triangle _ hc',
  have : is_O at_top (Œª x, (œÄ ‚åäx‚åã‚Çä * (2 * x‚Åª¬π) : ‚Ñù)) (Œª x, (log x)‚Åª¬π),
  { simp_rw [mul_left_comm],
    apply is_O.const_mul_left,
    refine (is_O_prime_counting_div_log.mul (is_O_refl _ _)).congr' eventually_eq.rfl _,
    filter_upwards [eventually_gt_at_top (0 : ‚Ñù)] with x hx,
    rw [div_eq_mul_inv, mul_right_comm, mul_inv_cancel hx.ne', one_mul] },
  refine is_O.trans (is_O_of_le _ _) this,
  intro x,
  rw [norm_eq_abs, norm_eq_abs],
  apply is_O_reciprocal_difference_aux.trans (le_trans (le_of_eq _) (le_abs_self _)),
  rw [sum_const, prime_counting_eq_card_primes, nsmul_eq_mul],
end

lemma prime_power_reciprocal : ‚àÉ b,
  is_O at_top (Œª x : ‚Ñù, (‚àë q in (finset.Icc 1 ‚åäx‚åã‚Çä).filter is_prime_pow, (q : ‚Ñù)‚Åª¬π) - (log (log x) + b))
    (Œª x, (log x)‚Åª¬π) :=
begin
  obtain ‚ü®c, hc‚ü© := is_O_reciprocal_difference,
  exact ‚ü®_ + c, (hc.add prime_reciprocal).congr_left (Œª x, by ring_nf)‚ü©,
end

lemma summable_indicator_iff_subtype {Œ± Œ≤ : Type*} [topological_space Œ±] [add_comm_monoid Œ±]
  {s : set Œ≤} (f : Œ≤ ‚Üí Œ±) :
  summable (f ‚àò coe : s ‚Üí Œ±) ‚Üî summable (s.indicator f) :=
exists_congr (Œª _, has_sum_subtype_iff_indicator)

lemma is_unit_of_is_unit_pow {Œ± : Type*} [comm_monoid Œ±] {a : Œ±} :
  ‚àÄ n, n ‚â† 0 ‚Üí (is_unit (a ^ n) ‚Üî is_unit a)
| 0 h := (h rfl).elim
| 1 _ := by simp
| (n+2) _ := by rw [pow_succ, is_unit.mul_iff, is_unit_of_is_unit_pow _ n.succ_ne_zero, and_self]

lemma is_prime_pow_and_not_prime_iff {Œ± : Type*} [cancel_comm_monoid_with_zero Œ±] (x : Œ±) :
  is_prime_pow x ‚àß ¬¨ prime x ‚Üî (‚àÉ p k, prime p ‚àß 1 < k ‚àß p ^ k = x) :=
begin
  split,
  { rintro ‚ü®‚ü®p, k, hp, hk, rfl‚ü©, t‚ü©,
    refine ‚ü®_, k, hp, _, rfl‚ü©,
    rw ‚Üênat.succ_le_iff at hk,
    apply lt_of_le_of_ne hk,
    rintro rfl,
    apply t,
    rwa pow_one },
  { rintro ‚ü®p, k, hp, hk, rfl‚ü©,
    have : k ‚â† 0 := by linarith,
    refine ‚ü®is_prime_pow.pow hp.is_prime_pow ‚Äπk ‚â† 0‚Ä∫, Œª t, _‚ü©,
    have : p ^ k = p * (p ^ (k - 1)),
    { rw [‚Üêpow_succ, tsub_add_cancel_of_le hk.le] },
    have := (t.irreducible.is_unit_or_is_unit this).resolve_left hp.not_unit,
    apply hp.not_unit,
    rwa is_unit_of_is_unit_pow at this,
    rwa [ne.def, tsub_eq_zero_iff_le, not_le] }
end

lemma log_one_sub_recip {p : ‚Ñï} (hp : 1 < p) :
  |(p : ‚Ñù)‚Åª¬π + log (1 - (p : ‚Ñù)‚Åª¬π)| ‚â§ ((p - 1) * p)‚Åª¬π :=
begin
  have hp‚ÇÅ : (1 : ‚Ñù) < p := nat.one_lt_cast.2 hp,
  have hp‚ÇÄ : (0 : ‚Ñù) < p := zero_le_one.trans_lt hp‚ÇÅ,
  have hp_inv : |(p : ‚Ñù)‚Åª¬π| < 1,
  { rwa [abs_inv, nat.abs_cast, inv_lt_one_iff_of_pos hp‚ÇÄ] },
  have := abs_log_sub_add_sum_range_le hp_inv 1,
  rwa [range_one, sum_singleton, nat.cast_zero, abs_inv, nat.abs_cast, zero_add, zero_add, div_one,
    pow_one, inv_pow _ 2, inv_div_left, sq, ‚Üêmul_assoc, sub_mul, one_mul,
    inv_mul_cancel hp‚ÇÄ.ne'] at this,
end

lemma my_func_neg {p : ‚Ñï} (hp : 1 < p) : (p : ‚Ñù)‚Åª¬π + log (1 - (p : ‚Ñù)‚Åª¬π) ‚â§ 0 :=
by linarith [log_le_sub_one_of_pos (sub_pos_of_lt (inv_lt_one (nat.one_lt_cast.2 hp)))]

lemma mertens_third_log_error :
  ‚àÉ c, is_O at_top
    (Œª x, ‚àë p in (finset.Icc 1 ‚åäx‚åã‚Çä).filter nat.prime, -((p : ‚Ñù)‚Åª¬π + log (1 - (p : ‚Ñù)‚Åª¬π)) - c)
      (Œª x : ‚Ñù, x‚Åª¬π) :=
begin
  simp only [sum_filter],
  refine is_O_partial_of_bound' (Œª n, _) (Œª n, _); split_ifs,
  { exact neg_le_of_neg_le (neg_le_of_abs_le (log_one_sub_recip h.one_lt)) },
  { exact my_mul_thing' },
  { rw neg_nonneg, exact my_func_neg h.one_lt },
  { refl },
end

lemma mertens_third_log :
  ‚àÉ c, is_O at_top
    (Œª x : ‚Ñù,
      ‚àë p in (finset.Icc 1 ‚åäx‚åã‚Çä).filter nat.prime, log (1 - (p : ‚Ñù)‚Åª¬π)‚Åª¬π - (log (log x) + c))
      (Œª x : ‚Ñù, (log x)‚Åª¬π) :=
begin
  obtain ‚ü®c‚ÇÇ, hc‚ÇÇ‚ü© := mertens_third_log_error,
  replace hc‚ÇÇ := hc‚ÇÇ.trans (is_o_log_id_at_top.is_O.inv_rev _),
  swap,
  { filter_upwards [eventually_gt_at_top (1 : ‚Ñù)] with x hx i using ((log_pos hx).ne' i).elim },
  refine ‚ü®c‚ÇÇ + meissel_mertens, (prime_reciprocal.add hc‚ÇÇ).congr_left _‚ü©,
  intro x,
  simp only [log_inv, sum_neg_distrib, sum_add_distrib, neg_add, prime_summatory, sum_sub_distrib],
  ring,
end

def partial_euler_product (n : ‚Ñï) := ‚àè p in (finset.Icc 1 n).filter nat.prime, (1 - (p : ‚Ñù)‚Åª¬π)‚Åª¬π

@[simp] lemma partial_euler_product_zero : partial_euler_product 0 = 1 :=
by simp [partial_euler_product]

/-- A trivial global upper bound on the partial euler product -/
lemma partial_euler_trivial_upper_bound {n : ‚Ñï} : partial_euler_product n ‚â§ 2 ^ œÄ n :=
begin
  rw [partial_euler_product, prime_counting_eq_card_primes, ‚Üêprod_const],
  have : ‚àÄ i, nat.prime i ‚Üí 0 < (1 - (i : ‚Ñù)‚Åª¬π) :=
    Œª i hi, (sub_pos_of_lt (inv_lt_one (nat.one_lt_cast.2 hi.one_lt))),
  refine prod_le_prod (Œª i hi, (inv_pos.2 (this i (mem_filter.1 hi).2)).le) (Œª i hi, _),
  simp only [mem_filter] at hi,
  rw [inv_le (this _ hi.2) (by norm_num : (0 : ‚Ñù) < 2), le_sub, inv_le],
  { norm_num,
    exact_mod_cast hi.2.two_le },
  { exact nat.cast_pos.2 hi.2.pos },
  { norm_num1 },
end

/-- A trivial global lower bound on the partial euler product -/
lemma partial_euler_trivial_lower_bound {n : ‚Ñï} : 1 ‚â§ partial_euler_product n :=
begin
  refine one_le_prod (Œª p hp, _),
  simp only [mem_filter] at hp,
  exact one_le_inv (sub_pos_of_lt (inv_lt_one (nat.one_lt_cast.2 hp.2.one_lt))) (by simp),
end

lemma mertens_third :
  ‚àÉ c, 0 < c ‚àß is_O at_top (Œª x, partial_euler_product ‚åäx‚åã‚Çä - c * real.log x) (Œª _, (1 : ‚Ñù)) :=
begin
  obtain ‚ü®c, hc‚ü© := mertens_third_log,
  obtain ‚ü®k, hk‚ÇÄ, hk‚ü© := hc.exists_pos,
  refine ‚ü®exp c, exp_pos _, is_O.of_bound (2 * (k * exp c)) _‚ü©,
  filter_upwards [hk.bound, tendsto_log_at_top.eventually (eventually_ge_at_top k)] with x hx hx',
  have hk' : k * (log x)‚Åª¬π ‚â§ 1,
  { rwa [mul_inv_le_iff (hk‚ÇÄ.trans_le hx'), mul_one] },
  rw [norm_eq_abs, norm_inv, norm_of_nonneg (hk‚ÇÄ.le.trans hx')] at hx,
  have i := (real.abs_exp_sub_one_le (hx.trans hk')).trans
    (mul_le_mul_of_nonneg_left hx zero_le_two),
  have hx'' : 0 < log x := hk‚ÇÄ.trans_le hx',
  have hx''' : 0 < exp c * log x := mul_pos (exp_pos _) hx'',
  have hp : ‚àÄ p, p ‚àà filter nat.prime (Icc 1 ‚åäx‚åã‚Çä) ‚Üí 0 < (1 - (p : ‚Ñù)‚Åª¬π)‚Åª¬π,
  { intros p hp,
    simp only [mem_filter] at hp,
    exact inv_pos.2 (sub_pos_of_lt (inv_lt_one (nat.one_lt_cast.2 hp.2.one_lt))) },
  rw [exp_sub, exp_add, exp_log hx'', ‚Üêlog_prod _ _ (Œª p h, (hp p h).ne'), exp_log (prod_pos hp),
    mul_comm, div_sub_one hx'''.ne', abs_div, abs_of_nonneg hx'''.le, div_le_iff hx''', mul_assoc,
    mul_mul_mul_comm, inv_mul_cancel hx''.ne', mul_one] at i,
  rwa [norm_eq_abs, norm_one, mul_one],
end

lemma weak_mertens_third_upper : is_O at_top (Œª x, partial_euler_product ‚åäx‚åã‚Çä) log :=
let ‚ü®c, _, hc‚ü© := mertens_third in
  ((hc.trans (is_o_one_log 1).is_O).add (is_O_const_mul_self c _ _)).congr_left (by simp)

lemma weak_mertens_third_lower : is_O at_top log (Œª x, partial_euler_product ‚åäx‚åã‚Çä) :=
begin
  obtain ‚ü®c, hc‚ÇÄ, hc‚ü© := mertens_third,
  have h := is_O_self_const_mul _ hc‚ÇÄ.ne' log at_top,
  have := hc.trans_is_o ((is_o_one_log 1).trans_is_O h),
  exact (h.trans this.right_is_O_add).congr_right (by simp),
end

lemma weak_mertens_third_upper_all :
  ‚àÉ c, 0 < c ‚àß ‚àÄ x : ‚Ñù, 2 ‚â§ x ‚Üí ‚à•partial_euler_product ‚åäx‚åã‚Çä‚à• ‚â§ c * ‚à•log x‚à• :=
begin
  obtain ‚ü®c, hc‚ÇÄ, hc‚ü© := weak_mertens_third_upper.exists_pos,
  rw [is_O_with_iff, eventually_at_top] at hc,
  obtain ‚ü®c‚ÇÅ, hc‚ÇÅ‚ü© := hc,
  refine ‚ü®max c (2 ^ c‚ÇÅ / real.log 2), lt_max_of_lt_left hc‚ÇÄ, Œª x hx, _‚ü©,
  cases le_total c‚ÇÅ x,
  { exact (hc‚ÇÅ _ h).trans (mul_le_mul_of_nonneg_right (le_max_left _ _) (norm_nonneg _)) },
  rw [norm_of_nonneg (zero_le_one.trans partial_euler_trivial_lower_bound),
    norm_of_nonneg (log_nonneg (one_le_two.trans hx))],
  have : (2 : ‚Ñù) ^ œÄ ‚åäx‚åã‚Çä ‚â§ 2 ^ c‚ÇÅ,
  { rw ‚Üêrpow_nat_cast,
    apply rpow_le_rpow_of_exponent_le one_le_two,
    refine le_trans _ ((nat.floor_le (zero_le_two.trans hx)).trans h),
    exact nat.cast_le.2 (prime_counting_le_self ‚åäx‚åã‚Çä) },
  apply (partial_euler_trivial_upper_bound.trans this).trans _,
  refine le_trans _ (mul_le_mul (le_max_right _ _)
    ((log_le_log zero_lt_two (zero_lt_two.trans_le hx)).2 hx) (log_nonneg one_le_two)
    (le_max_of_le_left hc‚ÇÄ.le)),
  rw div_mul_cancel _ (log_pos one_lt_two).ne',
end

lemma weak_mertens_third_lower_all :
  ‚àÉ c, 0 < c ‚àß ‚àÄ x : ‚Ñù, 1 ‚â§ x ‚Üí c * ‚à•log x‚à• ‚â§ ‚à•partial_euler_product ‚åäx‚åã‚Çä‚à• :=
begin
  obtain ‚ü®c, hc‚ÇÄ, hc‚ü© := weak_mertens_third_lower.exists_pos,
  rw [is_O_with_iff, eventually_at_top] at hc,
  obtain ‚ü®c‚ÇÅ, hc‚ÇÅ‚ü© := hc,
  let c' := max c (log c‚ÇÅ),
  have hc' : 0 < c' := lt_max_of_lt_left hc‚ÇÄ,
  refine ‚ü®c'‚Åª¬π, inv_pos.2 hc', Œª x hx, _‚ü©,
  cases le_total c‚ÇÅ x,
  { rw inv_mul_le_iff hc',
    exact (hc‚ÇÅ _ h).trans (mul_le_mul_of_nonneg_right (le_max_left _ _) (norm_nonneg _)) },
  rw [norm_of_nonneg (log_nonneg hx),
    norm_of_nonneg (zero_le_one.trans partial_euler_trivial_lower_bound)],
  refine le_trans _ partial_euler_trivial_lower_bound,
  rw [inv_mul_le_iff hc', mul_one],
  exact le_trans ((log_le_log (zero_lt_one.trans_le hx) (by linarith)).2 h) (le_max_right _ _),
end

lemma two_pow_card_distinct_divisors_le_divisor_count {n : ‚Ñï} (hn : n ‚â† 0) :
  2 ^ œâ n ‚â§ œÉ 0 n :=
begin
  rw [card_distinct_factors_apply, ‚Üêlist.card_to_finset, divisor_function_exact hn, finsupp.prod,
    ‚Üênat.support_factorization],
  apply finset.pow_card_le_prod,
  intros p hp,
  rwa [nat.succ_le_iff, lt_add_iff_pos_left, pos_iff_ne_zero, ‚Üêfinsupp.mem_support_iff],
end

lemma mul_eq_mul_iff {a b c d : ‚Ñï}
  (ha : 0 < a) (hb : 0 < b) (hac : a ‚â§ c) (hbd : b ‚â§ d) :
  a * b = c * d ‚Üî a = c ‚àß b = d :=
begin
  refine ‚ü®Œª h, _, Œª h, by rw [h.1, h.2]‚ü©,
  rcases hac.eq_or_lt with rfl | hac,
  { exact ‚ü®rfl, mul_left_cancel‚ÇÄ ha.ne' h‚ü© },
  rcases eq_or_lt_of_le hbd with rfl | hbd,
  { exact ‚ü®mul_right_cancel‚ÇÄ hb.ne' h, rfl‚ü© },
  exact ((mul_lt_mul'' hac hbd ha.le hb.le).ne h).elim,
end

lemma finset.prod_eq_prod_iff_of_le' {Œπ : Type*}
  {s : finset Œπ} {f g : Œπ ‚Üí ‚Ñï} (hf : ‚àÄ i ‚àà s, 0 < f i) (h : ‚àÄ i ‚àà s, f i ‚â§ g i) :
  ‚àè i in s, f i = ‚àè i in s, g i ‚Üî ‚àÄ i ‚àà s, f i = g i :=
begin
  induction s using finset.cons_induction_on with a s has ih generalizing hf h,
  { simp },
  simp only [prod_cons, mem_cons, forall_eq_or_imp] at ‚ä¢ hf h,
  rw [mul_eq_mul_iff hf.1 (prod_pos hf.2) h.1 (prod_le_prod (Œª i hi, (hf.2 i hi).le) h.2),
    ih hf.2 h.2],
end

lemma divisor_count_eq_pow_iff_squarefree {n : ‚Ñï} :
  œÉ 0 n = 2 ^ œâ n ‚Üî squarefree n :=
begin
  rcases eq_or_ne n 0 with rfl | hn,
  { simp },
  rw [card_distinct_factors_apply, ‚Üêlist.card_to_finset, divisor_function_exact hn, finsupp.prod,
    ‚Üênat.support_factorization, ‚Üêprod_const, nat.squarefree_iff_factorization_le_one hn, eq_comm],
  rw finset.prod_eq_prod_iff_of_le',
  { split,
    { intros h p,
      by_cases hp : p ‚àà n.factorization.support,
      { rw ‚Üênat.succ.inj (h _ hp) },
      rw finsupp.not_mem_support_iff.1 hp,
      exact zero_le_one },
    intros h p hp,
    rw nat.succ_inj',
    exact le_antisymm (finsupp.mem_support_iff.1 hp).bot_lt (h _) },
  { intros,
    exact zero_lt_two },
  intros p hp,
  rw nat.succ_le_succ_iff,
  exact (finsupp.mem_support_iff.1 hp).bot_lt,
end

local notation n`#` := primorial n

lemma primorial_pos (n : ‚Ñï) : 0 < n# :=
prod_pos (by simp [nat.prime.pos] {contextual := tt})

lemma primorial_dvd_primorial_of_le {n m : ‚Ñï} (h : n ‚â§ m) :
  n# ‚à£ m# :=
begin
  apply finset.prod_dvd_prod_of_subset,
  apply filter_subset_filter,
  rw finset.range_subset,
  exact add_le_add h (le_refl 1),
end

lemma primorial_monotone : monotone primorial :=
Œª m n h, nat.le_of_dvd (primorial_pos _) (primorial_dvd_primorial_of_le h)

lemma dvd_primorial_of_prime {n p : ‚Ñï} (hp : p.prime) (hn : p ‚â§ n) : p ‚à£ n# :=
dvd_prod_of_mem _ (by simp [hp, hn, nat.lt_add_one_iff])

lemma dvd_primorial_self {p : ‚Ñï} (hp : p.prime) : p ‚à£ p# :=
dvd_primorial_of_prime hp le_rfl

lemma tendsto_primorial_at_top :
  tendsto primorial at_top at_top :=
begin
  apply primorial_monotone.tendsto_at_top_at_top,
  intro a,
  obtain ‚ü®p, hp‚ÇÅ, hp‚ÇÇ‚ü© := nat.exists_infinite_primes a,
  exact ‚ü®p, hp‚ÇÅ.trans (nat.le_of_dvd (primorial_pos _) (dvd_primorial_self hp‚ÇÇ))‚ü©,
end

lemma primorial_zero : primorial 0 = 1 := rfl
lemma primorial_one : primorial 1 = 1 := rfl
lemma primorial_two : primorial 2 = 2 := rfl
lemma primorial_three : primorial 3 = 6 :=
by norm_num [primorial, filter_insert, range_succ, range_one, filter_singleton]

lemma two_le_primorial {n : ‚Ñï} (hn : 2 ‚â§ n) : 2 ‚â§ primorial n :=
begin
  rw ‚Üêprimorial_two,
  exact primorial_monotone hn,
end

lemma squarefree_prime_prod {Œπ : Type*} {s : finset Œπ} (f : Œπ ‚Üí ‚Ñï) (hs : ‚àÄ i ‚àà s, (f i).prime)
  (hf : (s : set Œπ).inj_on f):
  squarefree (s.prod f) :=
begin
  unfreezingI { induction s using finset.cons_induction_on with a s has ih generalizing hs },
  { simp },
  simp only [prod_cons, mem_cons, forall_eq_or_imp] at hs ‚ä¢,
  simp only [coe_cons, set.inj_on_insert (mem_coe.not.2 has), set.mem_image, not_exists,
    mem_coe, not_and] at hf,
  rw nat.squarefree_mul,
  { exact ‚ü®hs.1.squarefree, ih hf.1 hs.2‚ü© },
  { apply nat.coprime_prod_right,
    intros i hi,
    rw nat.coprime_primes hs.1 (hs.2 _ hi),
    exact ne.symm (hf.2 _ hi) },
end

lemma squarefree_primorial (n : ‚Ñï) : squarefree (primorial n) :=
squarefree_prime_prod _ (by simp) (function.injective_id.inj_on _)

lemma divisor_lower_bound_aux (c : ‚Ñù) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  ‚àÄ·∂† n : ‚Ñï in at_top, 1 / log (log (n : ‚Ñù)) * (1 - Œµ) ‚â§ 1 / (log (log (n : ‚Ñù)) - c) :=
begin
  suffices : ‚àÄ·∂† x : ‚Ñù in at_top, 1 / x * (1 - Œµ) ‚â§ 1 / (x - c),
  { exact (tendsto_log_at_top.comp tendsto_log_at_top).comp tendsto_coe_nat_at_top_at_top this },
  filter_upwards [eventually_ge_at_top (c + -c / Œµ), eventually_gt_at_top (0 : ‚Ñù),
    eventually_gt_at_top c] with x hx hx' hx'',
  rwa [mul_comm, ‚Üêdiv_eq_mul_one_div, div_le_div_iff hx' (sub_pos_of_lt hx''), one_sub_mul, sub_sub,
    one_mul, sub_le_self_iff, ‚Üêneg_le_iff_add_nonneg', ‚Üêdiv_le_iff' hŒµ, le_sub_iff_add_le'],
end

lemma log_primorial_eq {n : ‚Ñï} : real.log (primorial n) = œë n :=
begin
  rw [primorial, chebyshev_first, nat.cast_prod, log_prod, nat.floor_coe],
  simp [nat.prime.ne_zero] {contextual := tt},
end

lemma factors_primorial {n : ‚Ñï} :
  (primorial n).factors = (list.range (n + 1)).filter nat.prime :=
begin
  rw [primorial],
  refine (list.eq_of_perm_of_sorted (nat.factors_unique _ _) _ (nat.factors_sorted _)).symm,
  { rw [prod_eq_multiset_prod, filter_val, range_coe, multiset.map_id', ‚Üêmultiset.coe_prod,
      ‚Üêmultiset.coe_filter],
    refl },
  { simp },
  refine list.pairwise.sublist (list.filter_sublist _) _,
  exact (list.pairwise_lt_range _).imp (Œª _ _, le_of_lt),
end

@[simp] lemma to_finset_filter
  {Œ± : Type*} {l : list Œ±} (p : Œ± ‚Üí Prop) [decidable_eq Œ±] [decidable_pred p] :
  (l.filter p).to_finset = l.to_finset.filter p :=
by { ext x, simp }

@[simp] lemma to_finset_range {n : ‚Ñï} : (list.range n).to_finset = finset.range n :=
by { ext x, simp }

lemma factors_to_finset_primorial {n : ‚Ñï} :
  (primorial n).factors.to_finset = (finset.range (n + 1)).filter nat.prime :=
by { rw factors_primorial, simp }

lemma card_distinct_factors_primorial {n : ‚Ñï} : œâ (primorial n) = œÄ n :=
by rw [card_distinct_factors_apply, ‚Üêlist.card_to_finset, factors_to_finset_primorial,
    nat.prime_counting, nat.prime_counting', nat.count_eq_card_filter_range]

lemma card_factors_primorial {n : ‚Ñï} : Œ© (primorial n) = œÄ n :=
begin
  rw [‚Üêcard_distinct_factors_primorial, eq_comm,
    card_distinct_factors_eq_card_factors_iff_squarefree (primorial_pos _).ne'],
  exact squarefree_primorial _
end

lemma le_log_sigma_zero_primorial :
  ‚àÉ c : ‚Ñù, ‚àÄ p, 2 ‚â§ p ‚Üí
    (log (primorial p : ‚Ñù) * real.log 2) / (log (log (primorial p : ‚Ñù)) - c) ‚â§
      real.log (œÉ 0 (primorial p)) :=
begin
  obtain ‚ü®c, hc‚ÇÄ, hc‚ü© := chebyshev_first_all,
  refine ‚ü®log c, Œª p hp, _‚ü©,
  set n := primorial p with hn,
  have hp‚ÇÅ : 2 ‚â§ (p : ‚Ñù) := by exact_mod_cast hp,
  have hp‚ÇÇ : 0 < (p : ‚Ñù) := zero_lt_two.trans_le hp‚ÇÅ,
  have hp‚ÇÉ : 0 < œë p := chebyshev_first_pos _ hp‚ÇÅ,
  rw [divisor_count_eq_pow_iff_squarefree.2 (squarefree_primorial _), nat.cast_pow, log_pow,
    card_distinct_factors_primorial, nat.cast_two, log_primorial_eq],
  have h‚ÇÅ : œë p ‚â§ œÄ p * log (p : ‚Ñù),
  { simpa using chebyshev_first_trivial_bound p },
  have h‚ÇÇ : log (p : ‚Ñù) ‚â§ log (œë p) - log c,
  { simpa [log_mul, hc‚ÇÄ.ne', hp‚ÇÇ.ne', norm_of_nonneg hp‚ÇÉ.le, le_sub_iff_add_le'] using
      log_le_log_of_le (mul_pos hc‚ÇÄ (by rwa norm_coe_nat)) (hc _ hp‚ÇÅ) },
  have h‚ÇÉ : 0 < log (p : ‚Ñù) := log_pos (by simpa),
  have h‚ÇÑ : 0 ‚â§ log (2 : ‚Ñù) := log_nonneg one_le_two,
  have h‚ÇÖ : (0 : ‚Ñù) ‚â§ œÄ p := nat.cast_nonneg (œÄ p),
  rw div_le_iff (h‚ÇÉ.trans_le h‚ÇÇ),
  nlinarith [mul_nonneg h‚ÇÖ h‚ÇÑ],
end

lemma nat.divisors_nonempty_iff {n : ‚Ñï} : n.divisors.nonempty ‚Üî n ‚â† 0 :=
‚ü®Œª h‚ÇÅ h‚ÇÇ, h‚ÇÅ.ne_empty (by simp [h‚ÇÇ]), Œª _, ‚ü®1, by simpa‚ü©‚ü©

lemma one_le_sigma {k n : ‚Ñï} (hn : n ‚â† 0) : 1 ‚â§ œÉ k n :=
by simpa using @finset.single_le_sum _ _ _ (Œª d, d ^ k) n.divisors (by simp) 1 (by simp [hn])

lemma sigma_pos {k n : ‚Ñï} (hn : n ‚â† 0) : 0 < œÉ k n :=
one_le_sigma hn

lemma divisor_lower_bound_log {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  ‚àÉ·∂† n : ‚Ñï in at_top, (real.log 2 / log (log (n : ‚Ñù)) * (1 - Œµ)) * log (n : ‚Ñù) ‚â§ log (œÉ 0 n : ‚Ñù) :=
begin
  obtain ‚ü®c, hc‚ü© := le_log_sigma_zero_primorial,
  have : ‚àÉ·∂† n : ‚Ñï in at_top, log (n : ‚Ñù) * real.log 2 / (log (log (n : ‚Ñù)) - c) ‚â§ log (œÉ 0 n : ‚Ñù) :=
    tendsto_primorial_at_top.frequently (eventually_at_top.2 ‚ü®2, hc‚ü©).frequently,
  apply (this.and_eventually (divisor_lower_bound_aux c hŒµ)).mp,
  simp only [and_imp],
  filter_upwards [eventually_ge_at_top 1] with n hn‚ÇÄ hn‚ÇÅ hn‚ÇÇ,
  apply hn‚ÇÅ.trans',
  rw [mul_div_assoc, mul_comm (log (n : ‚Ñù))],
  apply mul_le_mul_of_nonneg_right _ (log_nonneg (nat.one_le_cast.2 hn‚ÇÄ)),
  rw [div_eq_mul_one_div, mul_assoc, div_eq_mul_one_div (real.log 2)],
  apply mul_le_mul_of_nonneg_left hn‚ÇÇ (log_nonneg one_le_two),
end

lemma divisor_lower_bound {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  ‚àÉ·∂† n : ‚Ñï in at_top, (n : ‚Ñù) ^ (real.log 2 / log (log (n : ‚Ñù)) * (1 - Œµ)) ‚â§ œÉ 0 n :=
begin
  apply (divisor_lower_bound_log hŒµ).mp,
  filter_upwards [eventually_ge_at_top 1] with n hn‚ÇÄ hn‚ÇÅ,
  have hn‚ÇÄ' : 0 < n := hn‚ÇÄ,
  have hn‚ÇÄ'' : (0 : ‚Ñù) < n := by simpa,
  rwa [‚Üêlog_le_log (rpow_pos_of_pos hn‚ÇÄ'' _) (nat.cast_pos.2 (sigma_pos hn‚ÇÄ'.ne')), log_rpow hn‚ÇÄ'']
end

-- useful to have c explicit here so hc is a created goal
lemma cobounded_of_frequently {Œ± : Type*} [conditionally_complete_lattice Œ±]
  {f : filter Œ±} (c : Œ±) (hc : ‚àÉ·∂† x in f, c ‚â§ x) :
  is_cobounded (‚â§) f :=
‚ü®c, Œª d hd, let ‚ü®x, hxc, hxd‚ü© := (hc.and_eventually hd).exists in hxc.trans hxd‚ü©

lemma Limsup_eq_of_eventually_of_frequently {f : filter ‚Ñù} (c : ‚Ñù)
  (upper : ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÄ·∂† x : ‚Ñù in f, x ‚â§ c + Œµ)
  (lower : ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ·∂† x : ‚Ñù in f, c - Œµ ‚â§ x) :
  Limsup f = c :=
begin
  have hb : is_bounded (‚â§) f := ‚ü®c + 1, upper 1 zero_lt_one‚ü©,
  have hc : is_cobounded (‚â§) f :=
    cobounded_of_frequently (c - 1) (by simpa using lower 1 zero_lt_one),
  apply le_antisymm,
  { rw le_iff_forall_pos_le_add,
    exact Œª Œµ hŒµ, Limsup_le_of_le hc (upper _ hŒµ) },
  rw le_iff_forall_pos_le_add,
  intros Œµ hŒµ,
  rw ‚Üêsub_le_iff_le_add,
  apply le_limsup_of_frequently_le (lower _ hŒµ) hb,
end

lemma Limsup_eq_of_eventually_of_frequently_mul {f : filter ‚Ñù} {c : ‚Ñù} (hc : 0 ‚â§ c)
  (upper : ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÄ·∂† x : ‚Ñù in f, x ‚â§ c * (1 + Œµ))
  (lower : ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ·∂† x : ‚Ñù in f, c * (1 - Œµ) ‚â§ x) :
  Limsup f = c :=
begin
  rcases hc.eq_or_lt with rfl | hc,
  { refine Limsup_eq_of_eventually_of_frequently _ (Œª Œµ hŒµ, _) (Œª Œµ hŒµ, _),
    { apply eventually_le.trans (upper 1 zero_lt_one) (eventually_of_forall (Œª x, _)),
      simpa using hŒµ.le },
    apply (lower 1 zero_lt_one).mono,
    intros,
    linarith [hŒµ.le] },
  apply Limsup_eq_of_eventually_of_frequently,
  { intros Œµ hŒµ,
    simpa only [mul_one_add, mul_div_cancel' _ hc.ne'] using upper _ (div_pos hŒµ hc) },
  { intros Œµ hŒµ,
    simpa only [mul_one_sub, mul_div_cancel' _ hc.ne'] using lower _ (div_pos hŒµ hc) }
end

lemma divisor_limsup :
  at_top.limsup (Œª n : ‚Ñï, log (œÉ 0 n : ‚Ñù) * log (log (n : ‚Ñù)) / log (n : ‚Ñù)) = log (2 : ‚Ñù) :=
begin
  have h : tendsto (Œª n : ‚Ñï, (n : ‚Ñù)) at_top at_top := tendsto_coe_nat_at_top_at_top,
  have l := tendsto_log_at_top,
  refine Limsup_eq_of_eventually_of_frequently_mul (log_nonneg one_le_two) (Œª Œµ hŒµ, _) (Œª Œµ hŒµ, _),
  { change ‚àÄ·∂† x : ‚Ñï in at_top, _,
    filter_upwards [divisor_bound hŒµ, eventually_gt_at_top 0, h (eventually_gt_at_top 0),
      h $ l $ eventually_gt_at_top 0, h $ l $ l $ eventually_gt_at_top 0] with n hn hn‚ÇÄ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ,
    dsimp at hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ,
    have := log_le_log_of_le (nat.cast_pos.2 (sigma_pos hn‚ÇÄ.ne')) hn,
    simpa [log_rpow hn‚ÇÅ, ‚Üêdiv_le_iff hn‚ÇÇ, le_div_iff hn‚ÇÉ, div_mul_eq_mul_div] },
  change ‚àÉ·∂† x : ‚Ñï in at_top, _,
  refine (divisor_lower_bound_log hŒµ).mp _,
  filter_upwards [eventually_gt_at_top 0, h (eventually_gt_at_top 0),
    h $ l $ eventually_gt_at_top 0, h $ l $ l $ eventually_gt_at_top 0] with n hn hn‚ÇÄ hn‚ÇÅ hn‚ÇÇ hn‚ÇÉ,
  dsimp at hn‚ÇÄ hn‚ÇÅ hn‚ÇÇ,
  simpa only [le_div_iff hn‚ÇÅ, ‚Üêdiv_le_iff hn‚ÇÇ, ‚Üêdiv_mul_eq_mul_div],
end
